%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: SystemSchematic_new.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: robert
%%CreationDate: 2019/6/9, 12:54:18
%%BoundingBox: -248 247 356 603
%%HiResBoundingBox: -247.5530 247.5531 355.1810 602.7341
%%CropBox: -247.5530 247.5531 355.1810 602.7341
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1135 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2019-06-09T12:54:01+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 15 Visio 版"
   xmp:ModifyDate="2019-06-09T12:54:03+08:00"
   xmp:MetadataDate="2019-06-09T12:54:03+08:00"
   pdf:Producer="Acrobat Distiller 15.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:7d4b847c-80bd-4528-9a43-f170afa5b566"
   xmpMM:InstanceID="uuid:1c31d603-5ad2-4d25-b523-383589bfd657"
   pdfx:Company="CUHKSZ">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Simon Pun</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 247 
/Lookup <~
zE*H?CmGR$KgsOKR4YJAe)\`qcf$)74k1\S,g<\$Fd`94ibJ(N6`j`3]b.P3,dDj%fg!@mBjkAG(h:'f
[)\j%e$4$n;Kl1Q(f?MI9gX4?OjOr5$[%Ng01*n1Gd)<_\hpp5da1/Eb(_RD\9KP67cG@,GRY?.iz'bL
rV*Z#Um,T@[&0I.kCG[XhWl.t7;j4N"u1aaUM'G(`S.N]`4XdG4_<'ieL'+YQQOa;$J^TFD$C/n+2d)3
VXT8A+#O*GXEiRZSl;aESI#6b823\2`\PC.HPe&]Iq]rIhe\"oQB=@GOVgsXTV@STMqR"BVa#R1J5FC&
)MXI"tX`O2mQd`97ldD`qam,-dE8NA^0G[XhW@80;n(D.2Yah"lui7?Gim,6mHkhP"4^8n(n,odm)l.t
48\>>`FIV3*iZ_*R(\u22S`jW*X[\B6:P^R]T-64*,M/mD4APl/%EElQF*#01gin)eq1F=CJ$OI+>f$)
41P'_6MVN?T="9S`+0-hbBfZq[=IqW<l/Ku><YF:UgZ(7-tL2Uc+_6L"6&If-KDd$-@A5Gr"5VatmlJC
I?cG@/J%h&gGhUL#_\YYlJHt?[c>tRQdZ(.$q,8qI#!W`<%^os_-BiIn/;*R/CW03#E@o#_t^TFA!"p>
&/e&]Ls`3c[K?qj2m!s/N(Nd#FBDHTp=_m?FC2CU$SbItE1leg[C75ct&a1/Ee[%E^,=[k^XJnnot_Qp
7>beL`=a18NiSqqmt/gDP?6SpOucbdAObeL]:-lsE0>=_-^I:cmf+rM6uaL\cr;F!AF\YbuN2_$3UdDj
"d82rL-&e5?N]W%Yb:d-r@9ftH:90,$4:H^c>JSJ`reB5e&5;=bjX-JYQ\"fH>KPb?%e]Z",H=L7]+W2
-t]W%V_N-0"<c+prC*>TCjZC[@$UQ1'3.j6#86o?b#B2VJ)2(0gP4tnShNHT4?cbmJSTo4O*Q%*uX$jm
:@V2pB84"Vr_];VD[Q@O2[>Y.?a.39N1SVM[qR=fke4>&/b^ojV)K5>-">":p[_6Bn1)&!V__mHOG[@s
$568L=rWg&GM)A<bab.P3*Mf`e9<C9"OF^J;PS;)ImTSe=&\u22U%LNOC?;!cgU5Xd/g<e-Jah,!$kM+
e0BN%\,^9"1r3@cNYaLSZmeB,\"YFC^j=%#=S?VEuj+;bpqYa^jm];VDYXd>+\5r11p]rRqjCfjU9CKF
C6`O;sTLiI21J8&No7Q3.(WKW5IQ[sD^~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 242 
/Lookup <~
z4tnShh:'f[mGR$KVN?T=!s/N([%Ng0m,-dEhpp5df$)41dD`qab.P3*`O2mQaLSZmcbdAOeB,\"jOr5
$#6b82!W`<%B2VJ)f$)74gsXTViRZSljkAG(leg[C5;=bj$jm:@_6L"6kM+e0_Qg.:?qj2me&]Ls[@s$
5,8qI#G$eDQN-0"<R"BVaUQ1'3[\B6:JSJ`r>tRQdRY?.iZ(.$qd`97l;*R/Cz1F=CJa1/Eed)3VXIV3
*i'+YQQ.N]`4c+prC90,$4Xd>+\beL]:^TFD$PC.HPL2Uc+Kl1Q($OI+>&If-K'G(`S+rM6u4"Vr_=[k
^XWg&GMdDj"d%h&gGg<e-J]W%YbJnnotX-SbT+W2-tLiI21O*GXEY*kCba18NilJCI?4>&/b];VD[Q%*
uX4YJAem,6mH6SpOuk1\S,(_RD\)&!V_hUL#_\u22Ui7?GicG@,G2_$3U.39N1eB5e&[%E^,<C9"O_m?
FC,T@[&^8n(nd`94iin)eq<'ieLG[XhWEElQF8NA^0a1/Eb.j6#8BiIn/P'_6MR=fke68L=r%LNOCfZq
[=+;bpqg!@mB2(0gP:d-r@$4$n;f?MI95r11pKPb?%F'VlJQ@O2["9S`+APl/%-lsE0=%#=S6o?b#C/n
+23\2`\=@GOVK5>-"e]Z",'bLrV#R1J5dDj%fgsOKRBN%\,l.t48>=_-^H"(%Z:H^c>5VatmIqW<lTSe
=&/gDP?`3c[KVicfA\u22S_Qp7>(D.2Y0-hbB^TFA!P^R]T7Q3.(I:cmfDHTp=>":p[*Z#UmgX4?O\YY
lJ"p>&/e&]IqE*H?COa;$JSqqmt82rL-XdG4_Ya^jmah"lu*#01gbeL`=Nd#FB?;!cg3@cNY\>>`FA5G
r"l.t7;H=L7]W03#E]W%V_FC&)M>Y.?a;aESI\YbuNj4N"u1aaUM`j`3]&e5?NV2pB8XI"tX;F!AF`O;
sTDd$-@T8A+#To4O*9KP6775ct&Mf`e9YF:UgcG@/J*>TCjg<\$F@STMqkhP"40I.kCZC[@$CKFC6J8&
Noah,!$];VDY)A<ba/Ku><S;)ImF^J;PCfjU9)\`qcG[XhW9ftH:SVM[qLN$u.M/mD4^os_-?VEujbJ(
N6`jW*X\"oQBbItE1)\j%eHt?[cQ[sD^_6Bn1]rRqjd)<_\NHT4?-64*,,odm)2CU$S^ojV)\"fH>X-J
YQ^9"1r~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 197 
/Lookup <~
z:d-r@7Q3.(zKPb?%k1\S,i7?GiF'VlJ(_RD\[%Ng0mGR$KVicfA$OI+>5;=bjbeL]:_Qp7>.39N1Dd$
-@iRZSlf?MI9=[k^X2(0gPa1/Ee`3c[K]rIhe+;bpqBiIn/h:'f[f$)41G$eDQ"9S`+IqW<lg!@mBd`9
4i$4$n;UQ1'3m,6mHlJCI?*#01g+rM6uZ_*R(m,-dEkM+e0Kl1Q(!s/N(\YbuNaL\cr;*R/C;aESIah,
!$X-SbT)A<ba^os_-Oa;$J%LNOCPC.HP\u22S4tnSh82rL-90,$475ct&3\2`\)\j%e/gDP?2CU$S6Sp
OuSVM[qg<\$Fleg[Ce]Z",a1/EbV2pB89KP67"p>&/@o#_tin)eqgX4?O(D.2Y_6Bn1C/n+2E*H?Cl.t
48hpp5d#6b82R=fkedD`qaT8A+#=@GOVHt?[c];VDYfZq[=\>>`FNHT4?+W2-t!W`<%YFC^j&e5?NeB5
e&Nd#FBDHTp=*>TCj]W%V_Z(7-tXdG4_>tRQdjkAG(4>&/b68L=rl.t7;APl/%=%#=SN-0"<JSJ`rYa^
jmLiI21'bLrVd)<_\hUL#_H"(%Zj4N"u%h&gGW03#E4YJAeO*GXE_mHOGTo4O*@STMq0I.kCe&]IqjOr
5$J8&No)\`qcYF:UgdDj%fM/mD4b.P3*5Vatm,8qI#aLSZmWg&GMd)3VX)&!V_RY?.iU5Xd/3@cNYeB,
\"9ftH:K5>-"cbmJS?qj2m\"fH>_6L"62_$3UXI"tX'G(`SP^R]T_m?FC^9"1r[%E^,$jm:@#R1J5`jW
*X8NA^01aaUMcbdAObItE1,T@[&`j`3]WKW5I:H^c>'+YQQd`97lY*kCb];VD[L2Uc+4"Vr_gsOKRXd>
+\^8n(n>Y.?a-64*,/Ku><X-JYQdDj"dG[XhWH=L7]&If-K\"oQBcG@,G6o?b#^TFD$A5Gr"Jnnot\u2
2Uah"lu]rRqja18Nib.P3,~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 211 
/Lookup <~
z=@GOV4tnSh"9S`+P'_6Ml.t7;gsOKR@o#_t)\`qc];VDYmGR$Km,6mHQ[sD^"p>&/7Q3.(cbmJS]W%Y
b*#01gG[XhWj4N"ud)<_\8NA^03\2`\b.P3,^TFD$a1/Ee[@s$5'bLrVDd$-@hpp5de&]IqCKFC6$4$n
;Mf`e9h:'f[bJ(N65;=bj$OI+>Wg&GMkhP"4TSe=&)&!V_/Ku><in)eq]rRqj`jW*X?qj2mcbdAOO*GX
E*>TCj_6L"6#6b82'G(`STo4O*Ya^jm!W`<%!s/N(,8qI#82rL-90,$475ct&2_$3U/gDP?T8A+#aLSZ
mg<e-JlJCI?eB,\"`j`3]SVM[q6SpOuI:cmfcG@/J=[k^X_m?FCleg[C>tRQdLiI21d`97l$jm:@RY?.
i=%#=S;F!AFJSJ`r^8n(nYF:UgdDj%fZ(7-tk1\S,IqW<l%LNOC,T@[&fZq[=APl/%-lsE0_mHOG2(0g
PjOr5$Z_*R(XdG4_<'ieL)A<bad)3VX&e5?Ne]Z",i7?Gi1aaUM-64*,gsXTV:H^c>X-SbT>":p[l.t4
8>Y.?a.39N1gX4?Od`94iH"(%ZBN%\,ze&]Ls#R1J5:d-r@m,-dE?;!cg4"Vr_K5>-";*R/C%h&gGf$)
74_Qp7>UQ1'3@STMqdDj"d_Qg.:S;)ImiRZSl`O;sTG$eDQ'+YQQ,odm)ah,!$(D.2Y1F=CJ9ftH:\"f
H>XI"tXah"luJ8&NodD`qaC/n+2;aESIVN?T=P^R]TcG@,GVicfA+rM6ug!@mB\>>`FNd#FBLN$u.^9"
1rEElQF[%E^,(_RD\)\j%ebeL`=a18Nif$)41^ojV)&If-KaL\crA5Gr"4YJAe+W2-t5r11pbeL]:2CU
$S4>&/b6o?b#WKW5I]rIhe0I.kCf?MI9]W%V_1*n1GSqqmt`3c[KZ(.$qF^J;PjkAG(U5Xd/N-0"<\u2
2S3@cNYB2VJ)KPb?%M/mD4.N]`4.j6#8g<\$F68L=rkM+e0Oa;$JF'VlJbItE1Q@O2[X-JYQa1/EbhUL
#_+;bpq^TFA!~>
>>
/CSD add_res
/4 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 134 
/Lookup <~
G[XhWJSJ`rE*H?C@STMq<C9"O90,$4;aESIDd$-@>=_-^z,odm)KPb?%BN%\,>Y.?a:H^c>C/n+2G[Xh
WLiI213\2`\h:'f[mGR$K]rRqjF^J;Pf?MI9];VDY;*R/CFC&)M2_$3U5Vatm5;=bj4tnSh_6Bn1Ya^j
m68L=r.j6#8&e5?N>tRQdgsOKRm,6mHAPl/%)\`qc[%Ng0P'_6M*#01gf$)74-lsE0\"oQBQ[sD^-64*
,1F=CJOa;$J)\j%eeB,\"_mHOGa18NikhP"4fZq[=b.P3*bItE1b.P3,cbdAOlJCI?z!s/N(Q@O2[,T@
[&!W`<%)&!V_*>TCj(D.2Y'bLrV)A<ba.N]`4bJ(N6f$)41]W%V_$4$n;"9S`+cG@/J1aaUM2(0gP$OI
+>"p>&/ah,!$k1\S,4YJAe$jm:@6SpOu_Qg.:To4O*i7?Gi4>&/b?qj2mg<\$F>":p[+W2-tg!@mB^9"
1r=%#=SA5Gr"@o#_t;F!AF9KP67?VEuj9ftH:*Z#UmF'VlJDHTp=BiIn/0I.kC+;bpq?;!cg/gDP?hUL
#_m,-dEa1/Eehpp5d4"Vr_beL]:#6b828NA^0jkAG(SVM[ql.t48Ht?[cbeL`=`O2mQ]rIhekM+e0`O;
sTgX4?OdDj"d^8n(nU5Xd/\>>`F~>
>>
/CSD add_res
/5 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 242 
/Lookup <~
zBN%\,mGR$KiRZSl8NA^0%LNOCbeL`=l.t48g<e-Jd`97lbeL]:a1/Ebah,!$dD`qaf?MI9jOr5$m,-d
E4YJAe$4$n;IV3*id`94igX4?Oj4N"u]rIhe+rM6uah"luh:'f[m,6mHgsOKRcbdAO0I.kC;F!AFcG@,
GQ[sD^z'G(`S*Z#Um,T@[&0-hbBDd$-@khP"45r11p&If-K-lsE04"Vr_G[XhWleg[C\YYlJ>tRQd2(0
gP,odm)'bLrVQ%*uXjkAG(]rRqjd)3VXXdG4_DHTp=lJCI?CfjU94>&/bQ@O2[eB,\"];VDYYF:Ug=@G
OVe]Z",i7?Gi.39N1[@s$5H"(%ZP'_6MY*kCb`jW*Xe&]Ls`O2mQ*#01g_m?FC?;!cg=%#=SL2Uc+cG@
/Jk1\S,[\B6:^ojV)*>TCjin)eq^TFA!CKFC6^8n(nS;)Im1aaUM[%Ng0Oa;$J<C9"O,8qI#=[k^Xl.t
7;6SpOu!W`<%a1/EecbmJSLiI21Z(.$qU5Xd/b.P3,gsXTV.N]`4?qj2m\"oQBVN?T=Ya^jm&e5?N"p>
&/APl/%EElQF1F=CJ(_RD\#R1J575ct&\u22S'+YQQ_mHOG.j6#8VicfA/Ku><\YbuNH=L7]PC.HP90,
$4)&!V_d)<_\b.P3*#6b82;*R/CbItE1$jm:@@o#_ta18Ni:H^c>WKW5I!s/N(`O;sT>":p[)\`qc>=_
-^-64*,KPb?%V2pB8"9S`+$OI+>Mf`e9UQ1'3P^R]T3@cNY2_$3Uf$)41XI"tXT8A+#\"fH>>Y.?aTo4
O*Z_*R([%E^,bJ(N6W03#EX-SbTM/mD4G[XhW2CU$SSVM[qJ8&No/gDP?B2VJ)^os_-+;bpqkM+e0];V
D[_6Bn1F^J;P82rL-;aESI]W%V_LN$u.)\j%e^TFD$C/n+2X-JYQf$)74NHT4?I:cmf_6L"6BiIn/hpp
5daLSZm+W2-t\u22UO*GXEA5Gr"YFC^j?VEuj@80;ne&]IqhUL#_TSe=&Ht?[cZ(7-tIqW<laL\cr5;=
bj3\2`\9ftH:Xd>+\N-0"<ZC[@$FC&)MR=fkefZq[=Nd#FB%h&gGWg&GM(D.2YdDj"dSqqmtRY?.iJSJ
`r]W%Ybg!@mBKl1Q(<'ieL`j`3]E*H?CK5>-"g<\$F\>>`FJnnot1*n1G5Vatm:d-r@9KP67R"BVaeB5
e&68L=r~>
>>
/CSD add_res
/6 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 236 
/Lookup <~
zBN%\,mGR$Khpp5d75ct&%LNOCcG@/JkhP"4g<e-Jd`97lbeL]:a1/Ebb.P3*dD`qaf?MI9jOr5$leg[
C3\2`\$4$n;IV3*id`94igX4?Oj4N"u];VD[+rM6uh:'f[m,6mHl.t48gsOKRcG@,G/gDP?;F!AFQ[sD
^z'G(`S*Z#Um,T@[&0-hbBDd$-@4tnSh&e5?N-lsE04"Vr_H=L7]gsXTVlJCI?\"oQB>Y.?a2(0gP,od
m)%h&gG'bLrVQ%*uXjkAG(]rRqj>tRQdd)3VXX-JYQF'VlJBiIn/4>&/bQ@O2[eB,\"];VDYYF:Ug=@G
OVhUL#_-64*,ZC[@$$jm:@G[XhWP'_6MY*kCb`jW*Xe&]Ls`O2mQe]Z",*#01g`O;sT>":p[JSJ`rc+p
rCi7?Gik1\S,[\B6:^ojV)*>TCjin)eq^TFA!E*H?C]W%YbTSe=&0I.kC)\`qc]rIhe[%Ng0Oa;$J<C9
"O,8qI#=[k^X(D.2Y5Vatm!W`<%ah"luS;)ImNHT4?SVM[qb.P3,&If-KA5Gr"Wg&GMZ_*R(+;bpq'+Y
QQAPl/%EElQF2_$3Ue&]Iq(_RD\dDj%fa1/EeVicfAR"BVa/Ku><3@cNYNd#FBm,-dEH"(%ZK5>-"Xd>
+\"p>&/d)<_\#6b82<'ieLbItE1FC&)M9ftH:\u22SKPb?%WKW5I"9S`+)&!V_#R1J5[%E^,Z(.$qbJ(
N6cbdAO!s/N(9KP671*n1Gg!@mB82rL-P^R]Tf$)41X-SbT90,$4eB5e&5;=bj_mHOG\YYlJ?qj2m5r1
1pf$)74dDj"dl.t7;;aESIG[XhW?;!cgaL\cr4YJAe:d-r@:H^c>;*R/C6o?b#>=_-^U5Xd/C/n+2^os
_-Sqqmt.39N1@o#_ta18Niah,!$cbmJS.j6#8\u22U2CU$S.N]`468L=rXI"tX)A<baDHTp=`3c[K)\j
%e8NA^0beL`=G$eDQ+W2-tg<\$F_6Bn1VN?T=LN$u.\YbuN^TFD$?VEujW03#ECfjU9L2Uc+7Q3.(fZq
[=IqW<l6SpOuiRZSl_m?FCUQ1'3N-0"<1aaUMRY?.i1F=CJYa^jm_Qp7>CKFC6_6L"6@STMqYFC^jT8A
+#Kl1Q(]W%V_=%#=S`j`3]@80;nkM+e0B2VJ)^9"1rXdG4_Z(7-tJnnot~>
>>
/CSD add_res
/7 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 243 
/Lookup <~
zFC&)MmGR$Kf$)740-hbBin)eqjkAG(fZq[=dDj"db.P3,`j`3]bJ(N6d`94ig<e-Jk1\S,cG@/J#6b8
2#R1J5M/mD4f?MI9gsOKRjOr5$Wg&GM7Q3.(e&]Lsi7?Gij4N"u];VD[8NA^0c+prCUQ1'3z'bLrV*Z#
Um,T@[&0I.kCIV3*im,-dEgsXTV-64*,(_RD\.j6#85;=bjQ[sD^khP"4h:'f[9KP67/gDP?,8qI#"9S
`+&If-KN-0"<_mHOGd)<_\Nd#FBX-SbTeB5e&4>&/b3@cNYNHT4?^os_-=[k^XiRZSle&]Iq'+YQQK5>
-"F^J;P!s/N(DHTp=Oa;$JX-JYQ`3c[K*#01gcbmJS$jm:@`O;sTl.t7;\u22S]W%Yb/Ku><YF:UgW03
#Ed)3VX$OI+>[@s$5\"fH>Q@O2[.39N1JSJ`rDd$-@A5Gr"gX4?O,odm))\`qcXd>+\LiI21leg[CVic
fA>=_-^?qj2m$4$n;b.P3*"p>&/4"Vr_l.t48T8A+#2CU$SWKW5I]W%V_EElQFcbdAOa1/Eb&e5?NI:c
mf?;!cg;*R/Cm,6mHTSe=&9ftH:68L=rcG@,G^TFA![\B6:a1/Ee<C9"O<'ieL;F!AF^TFD$beL]:(D.
2Y%LNOCg<\$F^ojV)E*H?CXdG4_C/n+2hUL#_4YJAeP'_6MdD`qa_Qp7>>":p[\u22UZ(.$q]rRqjJ8&
NoaLSZmKPb?%'G(`S^9"1rlJCI?bItE1:d-r@R=fke.N]`4\>>`F)A<baTo4O*!W`<%Z(7-tRY?.i*>T
CjkM+e0@o#_t@80;n+W2-t90,$45Vatmah"lu>tRQdBiIn/APl/%eB,\"B2VJ)YFC^jbeL`=hpp5d+rM
6uXI"tX+;bpqG[XhW_6L"6dDj%fCKFC6[%Ng01F=CJ1*n1GKl1Q(PC.HP75ct&G$eDQ4tnShL2Uc+d`9
7l\"oQB)&!V_]rIhe;aESI:H^c>`jW*XS;)ImF'VlJ>Y.?aMf`e9BN%\,5r11pIqW<l%h&gG^8n(n-ls
E06o?b#P^R]TSqqmtah,!$a18Ni?VEujZ_*R(R"BVaVN?T=2(0gPY*kCb82rL-SVM[qZC[@$[%E^,1aa
UMLN$u._m?FC_6Bn1U5Xd/_Qg.:3\2`\O*GXE\YbuNJnnot)\j%ee]Z",aL\crg!@mB=%#=S=@GOV6Sp
OuH"(%ZG[XhW~>
>>
/CSD add_res
/8 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 93 
/Lookup <~
f$)74mGR$Kg<\$F-lsE0zh:'f[k1\S,6o?b#^TFD$bJ(N6bItE1ah,!$hUL#_b.P3*cG@,GeB,\"A5Gr
"!W`<%!s/N(\>>`FTSe=&z#R1J5)A<ba-64*,68L=rKPb?%^os_-lJCI?IV3*i\"fH>T8A+#8NA^0a1/
EeSqqmt\"oQBDHTp=YFC^jG$eDQ`j`3]];VDYeB5e&"p>&/82rL-gsXTV*#01g$OI+>ah"lul.t484YJ
AeWg&GM>tRQd90,$4'G(`SBN%\,H"(%ZX-SbT9ftH:4>&/bZC[@$khP"4,8qI#d`97ljkAG(^8n(nkM+
e0,odm)1*n1G5r11pRY?.i2(0gP=%#=SG[XhW]rIhe@o#_tB2VJ)FC&)M_Qp7>l.t7;dD`qa:d-r@a18
Ni[\B6:\u22Ua1/Eb`3c[KgsOKRf$)41`O;sT;*R/CF'VlJ];VD[`jW*X_mHOG~>
>>
/CSD add_res
/9 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 143 
/Lookup <~
2_$3UBiIn/>Y.?a9ftH:90,$4;F!AF>":p[APl/%$OI+>z,T@[&C/n+2@o#_t=[k^X=%#=S5r11pV2pB
8mGR$KeB5e&*#01gj4N"ue]Z",A5Gr"k1\S,-lsE0iRZSl^TFD$7Q3.(5;=bj#6b82)A<baB2VJ)LN$u
.^TFA!bJ(N6NHT4?@80;n<C9"O6o?b#YFC^jf$)74)\`qcDHTp=eB,\"+;bpqG$eDQm,6mHU5Xd/]rIh
e'G(`Sd)3VXz.N]`4gsOKR;aESIL2Uc+l.t7;TSe=&`3c[K"p>&/\>>`F+W2-tf?MI9Q%*uX4>&/bN-0
"<b.P3*gsXTVd`97lW03#E/gDP?IV3*idDj%f'+YQQ&If-Kc+prCMf`e9[%E^,,8qI#g<\$F6SpOukhP
"4P'_6M`jW*XSqqmt]rRqje&]Lsm,-dEh:'f[/Ku><l.t48Q@O2[$4$n;fZq[=[%Ng0FC&)MT8A+#jkA
G(K5>-"dD`qa'bLrV0-hbBhUL#_Xd>+\d)<_\XI"tXF^J;P*>TCj$jm:@Q[sD^g!@mB68L=rOa;$J_mH
OGVN?T=]W%Yb(_RD\1F=CJ!W`<%]W%V_ZC[@$+rM6ugX4?O)&!V_d`94iI:cmfhpp5dYF:Ug?qj2m4YJ
Ae_Qp7>\YYlJleg[C9KP67lJCI?_6L"6>tRQd\YbuNa1/Ebf$)412CU$SNd#FBcbdAOe&]Iq~>
>>
/CSD add_res
/10 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 132 
/Lookup <~
z!s/N(,odm)4tnSh75ct&90,$482rL-4"Vr_,T@[&z3\2`\0-hbB:H^c>XdG4_c+prCjkAG(mGR$Kj4N
"ub.P3,R"BVa@80;n^8n(nm,-dEdDj"d#R1J56o?b#_Qp7>beL]:]W%V_U5Xd/Q@O2[UQ1'3]rIhed)3
VXf$)74'+YQQ=[k^Xin)eqm,6mHXI"tX1*n1G#6b82`O;sTeB5e&&e5?N!W`<%[%Ng0cbmJS3@cNYAPl
/%?VEujJSJ`r\YbuN2(0gP)A<baeB,\"d`97lKl1Q(gX4?O&If-KH=L7]$jm:@EElQF_mHOGRY?.ibIt
E1cbdAOX-JYQ=@GOV%h&gGS;)ImWg&GMBN%\,bJ(N6\"oQBB2VJ))\j%ee]Z",LiI21$OI+>Z(7-t+;b
pqFC&)MdD`qa(D.2YkM+e0"p>&/1aaUM=%#=Sah,!$k1\S,.j6#8)&!V_IV3*ibeL`=G$eDQHt?[c\>>
`F?qj2mF'VlJL2Uc+f?MI95;=bjgsOKRTSe=&hUL#_h:'f[^TFA!N-0"<C/n+2F^J;P[%E^,,8qI#@ST
Mq5Vatmhpp5dl.t7;V2pB8Dd$-@a1/EeZ(.$q>":p[2CU$S*>TCj.39N15r11pIqW<li7?Gileg[C]W%
Yba1/Ebf$)41]rRqj~>
>>
/CSD add_res
/11 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 177 
/Lookup <~
0-hbB90,$4,odm)z-64*,.39N1'bLrV=[k^XBiIn/4YJAe[\B6:mGR$KR"BVaSqqmtW03#E<'ieLVN?T
=F^J;PkhP"4Z(7-t82rL-BN%\,iRZSl\"oQB;F!AFAPl/%l.t7;YF:Ug:d-r@'G(`Se]Z",#R1J5d)<_
\\"fH>!W`<%6o?b#jkAG(2_$3U!s/N(UQ1'3.N]`4Q@O2[k1\S,1aaUMCfjU9m,6mHKPb?%3\2`\O*GX
E2CU$SS;)Im"9S`+`jW*XgsXTV*Z#Um^8n(n$jm:@<C9"Om,-dEeB5e&(D.2Y7Q3.(leg[CXd>+\)&!V
_,8qI#@80;n@STMq]W%YbFC&)MYa^jm75ct&&If-KEElQFd`94i_m?FCz%h&gGd)3VX^9"1r1F=CJjOr
5$`O;sThUL#_`O2mQ%LNOC1*n1GWg&GMcG@/JNHT4?kM+e04>&/blJCI?^os_-M/mD4Dd$-@)A<ba\YY
lJaL\crc+prC$4$n;=%#=S_Qp7>gX4?OG[XhWHt?[c4"Vr_,T@[&b.P3*_mHOG5;=bj\>>`F_6L"6"p>
&/0I.kC^TFA!^ojV)PC.HP9KP67IV3*i68L=rWKW5I;aESIC/n+29ftH:RY?.i)\j%efZq[=XI"tX+;b
pqg!@mB[%E^,(_RD\eB,\"dD`qaX-JYQgsOKR*#01gIqW<lQ%*uXOa;$J4tnShI:cmfb.P3,/Ku><`3c
[Khpp5d_Qg.:@o#_t5VatmU5Xd/f$)74F'VlJ+W2-tLN$u.+rM6ui7?GiT8A+#g<e-JTo4O*Z(.$q?;!
cg>tRQdE*H?CcbdAOf?MI9e&]Iq\YbuN>=_-^?VEujN-0"<beL]:8NA^0SVM[qah,!$aLSZm`j`3]a18
Ni~>
>>
/CSD add_res
/12 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 188 
/Lookup <~
/gDP?90,$40I.kCz)\j%e4tnShz;*R/C?qj2m@o#_t%h&gG[%E^,mGR$K\u22SDHTp=e&]Iq#6b82e&]
LsjOr5$,odm)k1\S,CfjU9]rRqj82rL-;F!AFcbdAOcbmJS:H^c>5Vatm>Y.?aJnnotd)3VXbeL`==[k
^X6o?b#$4$n;$jm:@dDj"d^TFA!\>>`Fd`97l&If-K'+YQQ]W%YbM/mD4'bLrVQ@O2[leg[C75ct&m,-
dEH=L7]'G(`SdD`qad)<_\0-hbBhpp5dY*kCbah"lu#R1J5F'VlJMf`e9[@s$5h:'f[,8qI#gsXTV;aE
SI`jW*XhUL#_-64*,LN$u.NHT4?\"oQBZ(7-ta1/Eec+prC%LNOCi7?Gi8NA^0G[XhW>tRQdAPl/%`3c
[KgsOKRQ%*uXiRZSl!s/N(68L=rl.t7;T8A+#JSJ`rbeL]:VN?T=!W`<%_6L"6)&!V_eB,\"jkAG(4"V
r_kM+e04YJAeBN%\,BiIn/G$eDQTo4O*4>&/b^os_-_Qg.:.39N1f$)74)\`qcVicfA@80;nOa;$J9KP
67Z_*R(H"(%Z*>TCjfZq[=cG@/J-lsE0in)eqXI"tX9ftH:aL\cra18Ni"p>&/I:cmf$OI+>G[XhWO*G
XEKPb?%eB5e&=%#=Sg<e-J`j`3]"9S`+ah,!$*#01ga1/EbYF:UgWg&GMlJCI?Ht?[c(_RD\`O2mQkhP
"4+;bpq5r11p_Qp7>`O;sTR=fke5;=bj:d-r@2(0gPS;)Im_6Bn1f$)41B2VJ)P^R]T2_$3Um,6mH^8n
(n/Ku><\"fH>];VD[e]Z",Xd>+\N-0"<Kl1Q(6SpOugX4?O<C9"O+W2-t(D.2Y^ojV)j4N"u^9"1rJ8&
Nob.P3*U5Xd/2CU$SQ[sD^bItE1g<\$Fd`94i^TFD$A5Gr"SVM[q_mHOG~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -602.734 translate
pgsv
[0 1 -1 0 355.181 0 ]ct
gsave
np
gsave
0 0 mo
0 602.734 li
355.181 602.734 li
355.181 0 li
cp
clp
11.7765 153.647 mo
159.127 153.647 li
159.127 11.9456 li
11.7765 11.9456 li
cp
false sop
0 0 0 0 cmyk
f
1.19999 lw
1 lc
1 lj
10 ml
[8.39755 5.99836 ] 0 dsh
false sadj
159.127 153.647 mo
159.127 11.9456 li
11.7765 11.9456 li
11.7765 153.647 li
159.127 153.647 li
cp
.437324 .904234 1 .107881 cmyk
@
90.0951 590.958 mo
274.067 590.958 li
274.067 253.699 li
90.0951 253.699 li
cp
0 0 0 0 cmyk
f
274.067 590.958 mo
274.067 253.699 li
90.0951 253.699 li
90.0951 590.958 li
274.067 590.958 li
cp
.437324 .904234 1 .107881 cmyk
@
149.839 444.996 mo
220.69 444.996 li
220.69 392.576 li
149.839 392.576 li
cp
0 0 0 0 cmyk
f
.719676 lw
[] 0 dsh
149.839 444.996 mo
220.69 444.996 li
220.69 392.576 li
149.839 392.576 li
cp
.92929 .879301 .889677 .799283 cmyk
@
220.69 444.996 mo
cp
@
114.414 341.305 mo
249.03 341.305 li
249.03 288.885 li
114.414 288.885 li
cp
0 0 0 0 cmyk
f
114.414 341.305 mo
249.03 341.305 li
249.03 288.885 li
114.414 288.885 li
cp
.92929 .879301 .889677 .799283 cmyk
@
249.03 341.305 mo
cp
@
156.924 392.624 mo
156.924 350.209 li
@
153.717 351.023 mo
156.924 341.305 li
160.18 351.023 li
153.717 351.023 li
ef
/13 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /13 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YMCBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (YMCBAA+TimesNewRomanPSMT)
%%Title: (YMCBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /YMCBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 16 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
39 <001C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86
EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA
759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E40
7CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D
500379950803F077453028FB6169> |
76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F
4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78
F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE3
65B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A6400850
90E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCB
CB8CA3E9F85837FAC6> |
74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F6
0847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7
FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93
AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02E
A707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7
A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25
BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4E
A45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFF
D70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8
191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D300
2781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015
D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD
46F1C707> |
87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED294
48713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC
43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E79
8B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |
68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
79 <001C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4
304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B682
8D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE55
27D6441CE02F5A28D63A618F> |
3 <001C60D8A8C9B8707C25> |
51 <001C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF8764
58925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153
D7D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E8
86C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18
CFB31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF1
2086F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FB
C628> |
85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2
CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E9
83E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B
53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA4
55AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D
8C360275B503E4954E912CD342> |
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
70 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
82 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4
416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDA
F996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA43
6702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B6
8D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
71 <001C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D20
3065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD332
9A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB8
57EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5C
CB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD1
04E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A61887936278
3A36815EA1CE5876FAC4F83CDFE1BD4A> |
36 <001C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C
495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F1
5A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A
63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D7398507
1102DFA93B6532> |
81 <001C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7
BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD
9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494
DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B28002
6130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F
2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6
A0027198438FE663C2EACF82CEB86F7C727594> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /YMCBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/YMCBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DRADRU+TimesNewRomanPSMT /YMCBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
167.504 435.565 mo
(\000'\000L\000J\000L\000W\000D\000O\000\003)
[-8.67072 -3.33566 -6.00317 -3.33563 -3.33566 -5.33029 -3.33566 0 ]ysh
181.863 440.215 mo
(\0003\000U\000H\000F\000R\000G\000H\000U)
[-6.67001 -3.99039 -5.32425 -5.32425 -5.99713 -5.99713 -5.32425 0 ]ysh
167.504 332.456 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66833 -6.00079 -5.32791 -3.33328 -6.00079 -6.00079 0 ]ysh
181.863 336.097 mo
(\0003\000U\000H\000F\000R\000G\000H\000U)
[-6.6713 -3.99167 -5.32553 -5.32553 -5.99841 -5.99841 -5.32553 0 ]ysh
241.945 246.088 mo
232.036 246.088 li
.92929 .879301 .889677 .799283 cmyk
@
185.265 479.607 mo
185.265 453.9 li
@
182.057 454.714 mo
185.265 444.996 li
188.52 454.714 li
182.057 454.714 li
ef
1 /13 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CNHBAA+TimesNewRomanPS-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (CNHBAA+TimesNewRomanPS-BoldMT)
%%Title: (CNHBAA+TimesNewRomanPS-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /CNHBAA+TimesNewRomanPS-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-558 -328 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
91 <001C60D8A8C9B7A73DB9D68E3C59A537D4244B74F90AE5CF41C7B4A2C7BC
A7A300F542CA93A2965E2AB86F9584D924C16737BF4180B7DA4B7375C292CAA9
5A0E3B2594252BA96E488864DADCA2044CBA91A0274761964E2F75E7C5D311CC
85FA3455FCD6989CD236F854D42654F054105B8E0A503E8AA280D5C605BAE218
5D188946DF0290DADBD2E70C64DD6894FEC8D24D6C9DAF05913AB860A656821A
51421A29E857B8FCAFC52BB43B89323BB040408BE2C54B02756FD8F29437E2C5
6AEA7FFF343CA63AC2EF68BA76DF88EA86E6216CF5E0E5EA45C5BAFB0EDA849E
2779> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /CNHBAA+TimesNewRomanPS-BoldMT-Identity-H /Identity-H 0 [/CNHBAA+TimesNewRomanPS-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DRADRV+TimesNewRomanPS-BoldMT /CNHBAA+TimesNewRomanPS-BoldMT-Identity-H findfont ct_VMDictPut
DRADRV+TimesNewRomanPS-BoldMT [0 -12.0159 -12.0159 0 0 0 ]msf
103.834 274.763 mo
(\000[)sh
156.924 480.469 mo
156.924 453.9 li
.92929 .879301 .889677 .799283 cmyk
@
153.717 454.714 mo
156.924 444.996 li
160.18 454.714 li
153.717 454.714 li
ef
171.382 479.32 mo
171.382 455.336 li
@
168.174 456.15 mo
171.382 446.432 li
174.637 456.15 li
168.174 456.15 li
ef
213.605 479.32 mo
213.605 453.9 li
@
210.397 454.714 mo
213.605 444.996 li
216.86 454.714 li
210.397 454.714 li
ef
193.499 466.012 mo
192.541 466.012 191.823 466.825 191.823 467.831 cv
191.823 468.884 192.541 469.698 193.499 469.698 cv
194.456 469.698 195.222 468.884 195.222 467.831 cv
195.222 466.825 194.456 466.012 193.499 466.012 cv
ef
193.499 466.012 mo
192.541 466.012 191.823 466.825 191.823 467.831 cv
191.823 468.884 192.541 469.698 193.499 469.698 cv
194.456 469.698 195.222 468.884 195.222 467.831 cv
195.222 466.825 194.456 466.012 193.499 466.012 cv
cp
@
199.722 466.012 mo
198.812 466.012 198.047 466.825 198.047 467.831 cv
198.047 468.884 198.812 469.698 199.722 469.698 cv
200.679 469.698 201.445 468.884 201.445 467.831 cv
201.445 466.825 200.679 466.012 199.722 466.012 cv
ef
199.722 466.012 mo
198.812 466.012 198.047 466.825 198.047 467.831 cv
198.047 468.884 198.812 469.698 199.722 469.698 cv
200.679 469.698 201.445 468.884 201.445 467.831 cv
201.445 466.825 200.679 466.012 199.722 466.012 cv
cp
@
206.233 466.012 mo
205.323 466.012 204.557 466.825 204.557 467.831 cv
204.557 468.884 205.323 469.698 206.233 469.698 cv
207.19 469.698 207.956 468.884 207.956 467.831 cv
207.956 466.825 207.19 466.012 206.233 466.012 cv
ef
206.233 466.012 mo
205.323 466.012 204.557 466.825 204.557 467.831 cv
204.557 468.884 205.323 469.698 206.233 469.698 cv
207.19 469.698 207.956 468.884 207.956 467.831 cv
207.956 466.825 207.19 466.012 206.233 466.012 cv
cp
@
171.095 391.762 mo
171.095 349.539 li
@
167.887 350.353 mo
171.095 340.635 li
174.35 350.353 li
167.887 350.353 li
ef
185.265 392.624 mo
185.265 350.209 li
@
182.057 351.023 mo
185.265 341.305 li
188.52 351.023 li
182.057 351.023 li
ef
213.605 392.576 mo
213.605 350.209 li
@
210.397 351.023 mo
213.605 341.305 li
216.86 351.023 li
210.397 351.023 li
ef
193.834 367.06 mo
192.876 367.06 192.158 367.874 192.158 368.927 cv
192.158 369.932 192.876 370.746 193.834 370.746 cv
194.791 370.746 195.557 369.932 195.557 368.927 cv
195.557 367.874 194.791 367.06 193.834 367.06 cv
ef
193.834 367.06 mo
192.876 367.06 192.158 367.874 192.158 368.927 cv
192.158 369.932 192.876 370.746 193.834 370.746 cv
194.791 370.746 195.557 369.932 195.557 368.927 cv
195.557 367.874 194.791 367.06 193.834 367.06 cv
cp
@
200.057 367.06 mo
199.148 367.06 198.382 367.874 198.382 368.927 cv
198.382 369.932 199.148 370.746 200.057 370.746 cv
201.015 370.746 201.781 369.932 201.781 368.927 cv
201.781 367.874 201.015 367.06 200.057 367.06 cv
ef
200.057 367.06 mo
199.148 367.06 198.382 367.874 198.382 368.927 cv
198.382 369.932 199.148 370.746 200.057 370.746 cv
201.015 370.746 201.781 369.932 201.781 368.927 cv
201.781 367.874 201.015 367.06 200.057 367.06 cv
cp
@
206.328 367.06 mo
205.371 367.06 204.605 367.874 204.605 368.927 cv
204.605 369.932 205.371 370.746 206.328 370.746 cv
207.238 370.746 208.004 369.932 208.004 368.927 cv
208.004 367.874 207.238 367.06 206.328 367.06 cv
ef
206.328 367.06 mo
205.371 367.06 204.605 367.874 204.605 368.927 cv
204.605 369.932 205.371 370.746 206.328 370.746 cv
207.238 370.746 208.004 369.932 208.004 368.927 cv
208.004 367.874 207.238 367.06 206.328 367.06 cv
cp
@
[.719676 1.43935 ] 0 dsh
185.265 361.172 mo
163.387 361.172 145.627 364.667 145.627 368.927 cv
145.627 373.236 163.387 376.73 185.265 376.73 cv
207.19 376.73 224.951 373.236 224.951 368.927 cv
224.951 364.667 207.19 361.172 185.265 361.172 cv
cp
.437324 .904234 1 .107881 cmyk
@
184.594 461.033 mo
164.632 461.033 148.451 463.762 148.451 467.065 cv
148.451 470.416 164.632 473.097 184.594 473.097 cv
204.509 473.097 220.69 470.416 220.69 467.065 cv
220.69 463.762 204.509 461.033 184.594 461.033 cv
cp
@
[] 0 dsh
241.945 288.885 mo
241.945 246.088 li
.92929 .879301 .889677 .799283 cmyk
@
224.951 253.173 mo
224.951 239.003 li
232.036 246.088 li
224.951 253.173 li
.0704356 0 .894438 0 cmyk
ef
224.951 253.173 mo
224.951 239.003 li
232.036 246.088 li
224.951 253.173 li
cp
.92929 .879301 .889677 .799283 cmyk
@
[.719676 1.43935 ] 0 dsh
179.664 266.05 mo
141.318 266.05 110.201 269.545 110.201 273.853 cv
110.201 278.114 141.318 281.609 179.664 281.609 cv
218.009 281.609 249.078 278.114 249.078 273.853 cv
249.078 269.545 218.009 266.05 179.664 266.05 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
166.882 246.375 mo
156.972 246.375 li
.92929 .879301 .889677 .799283 cmyk
@
166.882 289.172 mo
166.882 246.375 li
@
149.887 253.46 mo
149.887 239.29 li
156.972 246.375 li
149.887 253.46 li
.0704356 0 .894438 0 cmyk
ef
149.887 253.46 mo
149.887 239.29 li
156.972 246.375 li
149.887 253.46 li
cp
.92929 .879301 .889677 .799283 cmyk
@
121.499 246.088 mo
111.59 246.088 li
@
121.499 288.885 mo
121.499 246.088 li
@
104.505 253.173 mo
104.505 239.003 li
111.59 246.088 li
104.505 253.173 li
.0704356 0 .894438 0 cmyk
ef
104.505 253.173 mo
104.505 239.003 li
111.59 246.088 li
104.505 253.173 li
cp
.92929 .879301 .889677 .799283 cmyk
@
191.871 271.268 mo
190.914 271.268 190.148 272.13 190.148 273.135 cv
190.148 274.141 190.914 274.954 191.871 274.954 cv
192.781 274.954 193.547 274.141 193.547 273.135 cv
193.547 272.13 192.781 271.268 191.871 271.268 cv
ef
191.871 271.268 mo
190.914 271.268 190.148 272.13 190.148 273.135 cv
190.148 274.141 190.914 274.954 191.871 274.954 cv
192.781 274.954 193.547 274.141 193.547 273.135 cv
193.547 272.13 192.781 271.268 191.871 271.268 cv
cp
@
198.094 271.268 mo
197.137 271.268 196.371 272.13 196.371 273.135 cv
196.371 274.141 197.137 274.954 198.094 274.954 cv
199.052 274.954 199.77 274.141 199.77 273.135 cv
199.77 272.13 199.052 271.268 198.094 271.268 cv
ef
198.094 271.268 mo
197.137 271.268 196.371 272.13 196.371 273.135 cv
196.371 274.141 197.137 274.954 198.094 274.954 cv
199.052 274.954 199.77 274.141 199.77 273.135 cv
199.77 272.13 199.052 271.268 198.094 271.268 cv
cp
@
204.605 271.268 mo
203.648 271.268 202.929 272.13 202.929 273.135 cv
202.929 274.141 203.648 274.954 204.605 274.954 cv
205.562 274.954 206.328 274.141 206.328 273.135 cv
206.328 272.13 205.562 271.268 204.605 271.268 cv
ef
204.605 271.268 mo
203.648 271.268 202.929 272.13 202.929 273.135 cv
202.929 274.141 203.648 274.954 204.605 274.954 cv
205.562 274.954 206.328 274.141 206.328 273.135 cv
206.328 272.13 205.562 271.268 204.605 271.268 cv
cp
@
38.5848 119.275 mo
139.308 119.275 li
139.308 66.8547 li
38.5848 66.8547 li
cp
0 0 0 0 cmyk
f
38.5849 119.275 mo
139.308 119.275 li
139.308 66.8547 li
38.5849 66.8547 li
cp
.92929 .879301 .889677 .799283 cmyk
@
139.308 119.275 mo
cp
@
1 /13 /CSD get_res sepcs
1 sep
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
66.0634 111.663 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66833 -6.00079 -5.32791 -3.33328 -6.00079 -6.00079 0 ]ysh
80.4705 114.342 mo
(\000'\000H\000F\000R\000G\000H\000U)
[-8.67181 -5.33139 -5.33139 -6.0043 -6.00427 -5.33142 0 ]ysh
133.611 161.929 mo
123.701 161.929 li
.92929 .879301 .889677 .799283 cmyk
@
133.611 119.131 mo
133.611 161.929 li
@
116.616 154.843 mo
116.616 169.014 li
123.701 161.929 li
116.616 154.843 li
.0704356 0 .894438 0 cmyk
ef
116.616 154.843 mo
116.616 169.014 li
123.701 161.929 li
116.616 154.843 li
cp
.92929 .879301 .889677 .799283 cmyk
@
[.719676 1.43935 ] 0 dsh
88.2281 146.753 mo
58.4517 146.753 34.3721 143.258 34.3721 138.95 cv
34.3721 134.689 58.4517 131.195 88.2281 131.195 cv
118.005 131.195 142.132 134.689 142.132 138.95 cv
142.132 143.258 118.005 146.753 88.2281 146.753 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
45.7656 162.503 mo
35.8561 162.503 li
.92929 .879301 .889677 .799283 cmyk
@
45.7656 119.705 mo
45.7656 162.503 li
@
28.7711 155.418 mo
28.7711 169.588 li
35.8561 162.503 li
28.7711 155.418 li
.0704356 0 .894438 0 cmyk
ef
28.7711 155.418 mo
28.7711 169.588 li
35.8561 162.503 li
28.7711 155.418 li
cp
.92929 .879301 .889677 .799283 cmyk
@
63.0474 140.817 mo
62.09 140.817 61.3719 140.003 61.3719 138.95 cv
61.3719 137.945 62.09 137.131 63.0474 137.131 cv
64.0049 137.131 64.7708 137.945 64.7708 138.95 cv
64.7708 140.003 64.0049 140.817 63.0474 140.817 cv
ef
63.0474 140.817 mo
62.09 140.817 61.3719 140.003 61.3719 138.95 cv
61.3719 137.945 62.09 137.131 63.0474 137.131 cv
64.0049 137.131 64.7708 137.945 64.7708 138.95 cv
64.7708 140.003 64.0049 140.817 63.0474 140.817 cv
cp
@
69.2708 140.817 mo
68.3612 140.817 67.5953 140.003 67.5953 138.95 cv
67.5953 137.945 68.3612 137.131 69.2708 137.131 cv
70.2282 137.131 70.9942 137.945 70.9942 138.95 cv
70.9942 140.003 70.2282 140.817 69.2708 140.817 cv
ef
69.2708 140.817 mo
68.3612 140.817 67.5953 140.003 67.5953 138.95 cv
67.5953 137.945 68.3612 137.131 69.2708 137.131 cv
70.2282 137.131 70.9942 137.945 70.9942 138.95 cv
70.9942 140.003 70.2282 140.817 69.2708 140.817 cv
cp
@
75.7814 140.817 mo
74.8718 140.817 74.1059 140.003 74.1059 138.95 cv
74.1059 137.945 74.8718 137.131 75.7814 137.131 cv
76.7388 137.131 77.5048 137.945 77.5048 138.95 cv
77.5048 140.003 76.7388 140.817 75.7814 140.817 cv
ef
75.7814 140.817 mo
74.8718 140.817 74.1059 140.003 74.1059 138.95 cv
74.1059 137.945 74.8718 137.131 75.7814 137.131 cv
76.7388 137.131 77.5048 137.945 77.5048 138.95 cv
77.5048 140.003 76.7388 140.817 75.7814 140.817 cv
cp
@
91.1004 162.503 mo
81.1909 162.503 li
@
91.1004 119.705 mo
91.1004 162.503 li
@
74.1059 155.418 mo
74.1059 169.588 li
81.1909 162.503 li
74.1059 155.418 li
.0704356 0 .894438 0 cmyk
ef
74.1059 155.418 mo
74.1059 169.588 li
81.1909 162.503 li
74.1059 155.418 li
cp
.92929 .879301 .889677 .799283 cmyk
@
91.1004 66.8547 mo
91.1004 41.1475 li
@
87.8451 41.9613 mo
91.1004 32.2433 li
94.3557 41.9613 li
87.8451 41.9613 li
ef
[.719676 1.43935 ] 0 dsh
224.951 239.002 mo
37.1487 172.556 li
@
36.8615 175.859 mo
28.7711 169.588 li
39.0157 169.78 li
36.8615 175.859 li
ef
1 /13 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YMCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/YMCBAA+TimesNewRomanPSMT 7 GetGlyphDirectory
55 <001C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E4
8F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97
556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE
58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |
86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC2
2ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A
039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF
40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359
FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C5
93B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF50
9B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |
80 <001C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE1116793
2D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA181
6E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747
A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68
FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249
107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D1
8CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE95
5617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D
987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FA
FEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE
82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B51
7996> |
75 <001C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435
E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194
A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2
D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B58
5E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED
8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15
E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C448379
6F735A795EACD82F245D81FB43B5> |
20 <001C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |
16 <001C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |
56 <001C60D8A8C9B6079F6D024388243061A610EA3A6326F33263CDE8BCFFE9
F148F3D7F4C9725D2BAF9A3232BD1EB145B5A77D8B0651FBD8E8A9FB06CCD2A8
CC2722C436D9102F6A183E894B34B7045CE7C217957AA9B87F4515C93092C441
847223DE93B9E3D8ECF6C02AE8C75FDAA89CB34F7A7CE8EBAED7CDD0E6765B39
52A1A95E2E1735ECFE4DF6802DC3188EE398A9F5CCD7DB8E0B3AB2D84DF5AF6C
30AB040D323559946C1407613CE0866FB1002EF0B5DF66414A685DAD87F9D351
3811F878AD> |
!
end
end end
%ADOEndSubsetFont
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
108.191 478.793 mo
(\0007\000U\000D\000Q\000V\000P\000L\000W\000W\000H\000U)
[-7.32953 -3.98907 -5.32297 -5.99585 -4.66217 -9.33627 -3.32831 -3.32831 -3.32834 -5.32297 0 ]ysh
26.5186 125.406 mo
(\0007\000K\000H\000\003\000\024\000\020\000V\000W\000\003\0008\000V\000H\000U)
[-7.33557 -6.00189 -5.32901 -2.99792 -6.00192 -3.99515 -4.66824 -3.33435 -2.99792 -8.66943 -4.66821 -5.32904 
0 ]ysh
147.159 541.984 mo
226.195 541.984 li
226.195 480.66 li
147.159 480.66 li
cp
0 0 0 0 cmyk
f
.841749 lw
[] 0 dsh
147.159 541.984 mo
226.195 541.984 li
226.195 480.66 li
147.159 480.66 li
cp
.92929 .879301 .889677 .799283 cmyk
@
226.195 541.984 mo
cp
@
1 /13 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: YMCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/YMCBAA+TimesNewRomanPSMT 3 GetGlyphDirectory
37 <001C60D8A8C9B64EDFFBC13662E45548907DF94CFDD8366168A19798D3F9
4023374D4D2C86938E32D7DB9C1872F3A204253AB72EA5DE94FC03994C8EF8A3
AEA69543654A5C81A183CE8AEAD100B0BA927EF2453AE33B886ED98847317AAC
2483A7B07D884E6BA01DCB84EDD0DBB4BCDE82582971377C63466C51717F481B
412F62082ABE2DA40B3D1CD64A6F92915DAB718445366AAC40CD207CDC2AEAFB
F75F78F4F875F819FE068F712E647D09F9C9585654CB217F940FB0CC4A0399BD
16E20306B0AE361121402EB02A27DB6252E098ADE7CC6B62128FF27D9B35E955
978F8F1CC87FEE6B14877366567A52B860F7D53BC608D1A75802EE31B412> |
54 <001C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC
49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F
8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5B
FD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEE
B6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E6453375
18CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE90
4907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3A
B444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80
CE13D22435E5FCC1B5A000DE> |
88 <001C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58
A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB9581
52D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D55
5B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E
169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F
97520325221F3417C7781EB09765> |
!
end
end end
%ADOEndSubsetFont
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
167.265 535.953 mo
(\0008\000V\000H\000U\000\003\000%\000H\000D\000P\000\003)
[-8.66467 -4.66345 -5.32428 -3.99036 -2.99316 -8.00391 -5.32422 -5.32425 -9.33755 0 ]ysh
181.672 536.145 mo
(\0006\000F\000K\000H\000G\000X\000O\000L\000Q\000J)
[-6.66998 -5.32428 -5.99713 -5.32422 -5.99713 -5.99713 -3.32959 -3.32962 -5.99713 0 ]ysh
.719676 lw
[.719676 1.43935 ] 0 dsh
104.505 239.002 mo
35.3295 175.62 li
.92929 .879301 .889677 .799283 cmyk
@
33.7498 178.54 mo
28.7711 169.588 li
38.1061 173.753 li
33.7498 178.54 li
ef
149.887 239.29 mo
36.4785 174.04 li
@
35.5689 177.248 mo
28.7711 169.588 li
38.7763 171.599 li
35.5689 177.248 li
ef
104.505 239.002 mo
77.6963 177.726 li
@
75.0154 179.785 mo
74.1059 169.588 li
80.9516 177.2 li
75.0154 179.785 li
ef
149.887 239.29 mo
80.6643 175.62 li
@
79.0846 178.54 mo
74.1059 169.588 li
83.4409 173.753 li
79.0846 178.54 li
ef
224.951 239.002 mo
82.1962 173.322 li
@
81.5739 176.577 mo
74.1059 169.588 li
84.3026 170.689 li
81.5739 176.577 li
ef
195.94 153.599 mo
343.338 153.599 li
343.338 11.8977 li
195.94 11.8977 li
cp
0 0 0 0 cmyk
f
1.19999 lw
[8.39755 5.99836 ] 0 dsh
343.338 153.599 mo
343.338 11.8977 li
195.94 11.8977 li
195.94 153.599 li
343.338 153.599 li
cp
.437324 .904234 1 .107881 cmyk
@
222.796 119.227 mo
323.471 119.227 li
323.471 66.8069 li
222.796 66.8069 li
cp
0 0 0 0 cmyk
f
.719676 lw
[] 0 dsh
222.796 119.227 mo
323.471 119.227 li
323.471 66.8069 li
222.796 66.8069 li
cp
.92929 .879301 .889677 .799283 cmyk
@
323.471 119.227 mo
cp
@
1 /13 /CSD get_res sepcs
1 sep
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
250.275 111.615 mo
(\000$\000Q\000D\000O\000R\000J\000\003)
[-8.66833 -6.00079 -5.32791 -3.33328 -6.00079 -6.00079 0 ]ysh
264.682 114.295 mo
(\000'\000H\000F\000R\000G\000H\000U)
[-8.67181 -5.33139 -5.33139 -6.0043 -6.00427 -5.33142 0 ]ysh
317.822 161.881 mo
307.913 161.881 li
.92929 .879301 .889677 .799283 cmyk
@
317.822 119.083 mo
317.822 161.881 li
@
[.719676 1.43935 ] 0 dsh
272.44 146.705 mo
242.663 146.705 218.536 143.211 218.536 138.902 cv
218.536 134.594 242.663 131.147 272.44 131.147 cv
302.216 131.147 326.344 134.594 326.344 138.902 cv
326.344 143.211 302.216 146.705 272.44 146.705 cv
cp
.437324 .904234 1 .107881 cmyk
@
[] 0 dsh
229.977 162.455 mo
220.068 162.455 li
.92929 .879301 .889677 .799283 cmyk
@
229.977 119.658 mo
229.977 162.455 li
@
247.259 140.769 mo
246.301 140.769 245.536 139.955 245.536 138.902 cv
245.536 137.897 246.301 137.083 247.259 137.083 cv
248.216 137.083 248.934 137.897 248.934 138.902 cv
248.934 139.955 248.216 140.769 247.259 140.769 cv
ef
247.259 140.769 mo
246.301 140.769 245.536 139.955 245.536 138.902 cv
245.536 137.897 246.301 137.083 247.259 137.083 cv
248.216 137.083 248.934 137.897 248.934 138.902 cv
248.934 139.955 248.216 140.769 247.259 140.769 cv
cp
@
253.482 140.769 mo
252.573 140.769 251.807 139.955 251.807 138.902 cv
251.807 137.897 252.573 137.083 253.482 137.083 cv
254.44 137.083 255.206 137.897 255.206 138.902 cv
255.206 139.955 254.44 140.769 253.482 140.769 cv
ef
253.482 140.769 mo
252.573 140.769 251.807 139.955 251.807 138.902 cv
251.807 137.897 252.573 137.083 253.482 137.083 cv
254.44 137.083 255.206 137.897 255.206 138.902 cv
255.206 139.955 254.44 140.769 253.482 140.769 cv
cp
@
259.993 140.769 mo
259.083 140.769 258.317 139.955 258.317 138.902 cv
258.317 137.897 259.083 137.083 259.993 137.083 cv
260.95 137.083 261.716 137.897 261.716 138.902 cv
261.716 139.955 260.95 140.769 259.993 140.769 cv
ef
259.993 140.769 mo
259.083 140.769 258.317 139.955 258.317 138.902 cv
258.317 137.897 259.083 137.083 259.993 137.083 cv
260.95 137.083 261.716 137.897 261.716 138.902 cv
261.716 139.955 260.95 140.769 259.993 140.769 cv
cp
@
275.312 162.455 mo
265.402 162.455 li
@
275.312 119.658 mo
275.312 162.455 li
@
275.312 66.8069 mo
275.312 41.0996 li
@
272.057 41.9134 mo
275.312 32.1954 li
278.567 41.9134 li
272.057 41.9134 li
ef
1 /13 /CSD get_res sepcs
1 sep
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
210.733 124.732 mo
(\0007\000K\000H\000\003)
[-7.32239 -5.98868 -5.31583 0 ]ysh
%ADOBeginSubsetFont: QPOBAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /QPOBAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f728b780000000cc000000606376
742008fab09e0000012c0000079c6670676d4d5f5868000008c800000634
676c7966e2d98445000092d4000002b268656164e77d958500000efc0000
0036686865610e31116000000f3400000024686d747898a212d600000f58
000037e86c6f63610024e26400004740000037ec6d617870139404140000
7f2c000000206e616d65119e66ad00007f4c0000086b70726570ab1cb91f
000087b800000b1b67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000eff4000785b0000000100000000544d432000010020
fffc058efe460133072101bb400001bfdff700000371054c000000200008
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b3004802390458005300820082002203d703f104704042
5554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706
0504030201002c4523466020b02660b004262348482d2c452346236120b0
2661b004262348482d2c45234660b0206120b04660b004262348482d2c45
23462361b0206020b02661b02061b004262348482d2c45234660b0406120
b06660b004262348482d2c4523462361b0406020b02661b04061b0042623
48482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d
44235920b0ed51582320b04d44235920b09051582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b102
17453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b017
7ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b017
7ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b017
7ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01
182f2d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802ee23701020b802ee4520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab903b003b08a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b12601885158b94000020063b80400885458b20240
0243604259b94000040063b80800885458b202800243604259b128018851
58b94000080063b81000885458ba00020100000243604259595959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00010000
0007000050e73c765f0f3cf50819080000000000a31fb8bd00000000d67a
920dfc05fd8c0aaa0830000000090001000100000000000100000721fe45
00570ab9fc05fa500aaa001800070000000000000000000000000dfa0639
011c00000000020000000200000002aa009a035c01260400009304000056
06aa00900639006201b6010d02aa008c02aaff2104000122056600be0200
ffeb02aa0036020000450239ffbb0400007a0400007d0400002004000044
040000400400004904000081040000e80400004e0400003b02aa007a02aa
002405660096056600c805660096040000c6075c006104e3ff9c04e3ffd1
0556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca02aaffc0038d
ffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3ffcf05c70061
04e3ffd10400000e0473008f05c700da04e3010006aa00f904e3ff770473
00b80473fffc031d000d023900da031dff33036000380400ffef02aa0168
0400003004000036038d003804000027038d00400239fe9b0400ffc90400
0029023900580239fea0038d00140239004f05c70023040000270400003c
0400ff1e0400002d031d002a031dffed023900540400003c038d002c0556
0023038dffb8038dff5c031dffc70333008d023300ed0333ff6704540014
04e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a05c700da0400
00300400003004000030040000300400003004000030038d003c038d0040
038d0040038d0040038d0040023900580239005802390058023900580400
00270400003c0400003c0400003c0400003c0400003c0400003c0400003c
0400003c0400003c040000dd033300d404000072040000310400fffc02cd
00ad042f006c0400feb70614008b0614008b07d700be02aa019902aa010c
04640019071dff9405c7004805b40035046400350464005e0464005a0400
fff2049cffd203f4004005b4002b069600920464004802310000023500b2
027b00e40625005b0556002d0400000504000049031d0090056600960464
0054040000020464001e04e5ffc40400005404000025071d010a04e3ff9c
04e3ff9c05c7007a078d002d055600360400ffee071dffed0473018a0473
017502aa01b202aa01910464003503f4002f038dff60047300b70156feab
0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3020000d202aa
00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3ffd204e3ffd2
02aaffc002aaffc002aaffc002aaffc005c7007a05c7007a05c7007a05c7
00da05c700da05c700da0239005802aa00fe02aa00c602aa00f602aa0126
02aa01c102aa017d02aaffdb02aa012f02aa001102aa01520473ffc60239
00330400000e031dfff00473fffc031dffc7023300ed05c7ffd004000037
047300b7038dff6004e3ffcf0400ff1e056600960566017a026600a30266
006f02660084060000a1060000a1060000820400ffce05c7008e0400ffc9
02aaffc00400000e031dffed0556008a038d003c0556008a038d003c0400
0027040000c502ab01ee04e3ff9c0400003004e3ff9c0400003005c7ffc3
04de002705c7ffd004e3ffd2038d004004e3ffd2038d00400473ffbe0239
004f0473ffbe02e9004e0473ffbe029500490556ffc7040000270556ffc7
0400002705c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a0400
000e031dffed0473008f0239ffbd0473008f02e9005605c700da0400003c
05c700da0400003c0473fffc031dffc70473fffc031dffc7048dffb605c7
007d0617009d0433003c03b800300327001603f2003602dd0033046d004a
0400ffef0495009a0285001407eb002f0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700c0056600c604cd0099
0566009804d5022204d5010505abffe904ed01c005ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f0415004004000025060000550600ffc30401004b049e007301c0010d
0355012606ab006c0355001e04d5009202d6008302d6008304d500b202d6
007004e3ff9c040000300556008a038d003a0556008a038d003a04e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004005c7008e0400ffc905c7
008e0400ffc905c7008e0400ffc805c7ffca0400002905c7ffca04000029
02aaffc00239005402aaffc00239005802aaffc00239005402aaffc00239
ffc6038dffba0239fea00556ffc9038d0014038d00140473ffbe0239ffb6
0556ffc7040000270592ffc003db002705c7007a0400003c05c7007a0400
003c04e3ffd1031dff980400000e031dffed04730093023a003105c700da
0400003c05c700da0400003c05c700da0400003c05c700da0400003c06aa
00f905560023047300b8038dff5e0239fe9d04e3ffa504000030071dff94
0556002d05c700480400000502aa014d06aa00f90556002306aa00f90556
002306aa00f905560023047300b8038dff5e02aa01bd02aa00b704000031
04cd005a060000a10600008206000084060000e802aa004c02aaffdb02aa
019902aa00b404e3ff9c056f005d065600590337004d05c7007a0548005e
05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd20473fffc05c7
ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051dfff205c7007a
05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff7705a0011305c9
001b02aaffc0047300bc0433003c0327001603f8003a0239005503ac0035
03fcff7703270031033d002f03f8003a03ee005a0239005503d7001f0377
ffc00404ff94038d002c036d00250400003c03d7ff6f033f003f03ac0035
0385ff4004f8008f05a600480239005503ac00350400003c03ac00350595
003f04e3ffce066000c1048dffb6055a008e0400000e02aaffc002aaffc0
038dffba076bffbb075effc2066400c60550ffc7056200e105c7ffcd04e3
ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754ff9003f6fffe
05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca05c7007a05c7
ffc504e3ffcf0556008a0473008f056200e1066f009504e3ff7705c7ffcc
058300e70858ffe40858ffe40568007606faffc604b8ffc6053d001e0842
ffbe0542ff9104000030040600490379003f031f0002040c003d038d0040
0771ffff031fffce0400003c0400003c03be0025037dffa5051bffa403f8
00290400003c040000270400ff1e038d003805c70023038dff5c05ae003c
038dffb80400003c03d10056060a0040060a00400427003c056b006603a4
00660387000f05a4002a03b8ff84038d003c03d500280304ffaa037d0036
031dffed02390058023900550239fea0056fffa605b2002a0400002903be
0025038dff5c040000250385ffc30285005608000041078bffa804020032
0000fefb0000ff3a0000ff380000ff380000ff3a0000ff3a0000ff3a0000
ff380000ff38000000770000ff3a000000f70000feb502f700c00000fff3
02aa005f0000037a0000003602aa007a03d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00bf0208002903c4fffa03d3005901ef00c6038000c1
0349ffc7037000c703c8ffe403c3ffde020b004a023cff9d03b1006b0383
ffcd0372004f036effd5039000c50397fff0038eff8f039500bc04f500c2
03cbff85043800bf040b00c603de00c60186009b02f1009b064c0010021c
00bf038000c10380009c0370000a0370000a0383ffd104f500c204f500c2
04f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00670225000303d3005901ef0067038000c10349ffc7
037000c703c3ffde023cff9d03b1006b0372004f036effd50397fff0038e
ff8f039500bc04f500c203cbff85021c00bf037fffc50349ffc7036effd5
0448004a0000ffdc0000ff250000ffdc0000fe510400005a0800000005c7
007a0445003c060800da045d003c0000ff1a0000fdf20000fdb40000ff91
0000fef60000fee40000ff780000ff8a0000fe880000fefb0000fea20000
fe6e0000fdf4000000350000001f0000fe47041a0078060000a10600006f
0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe380000fdcd0000
fd190000fce70000fd710000fd3f0000fcf90000fccd0000fc050000fc05
0000fc550000fc0f0000ff190000ffa20000fe310000fc550000fcef0000
fd9c0000fdda0000fca10000fd530000fcef0000fcb30000fd0d0000fcb3
0000fdba0000fd940000fd7e0000fd300239005804e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d0040
02aaffc00239005802aaffc00239003105c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a
0400003c05c7007a0400003c05c7007a0445003c05c7007a0445003c05c7
007a0445003c05c7007a0445003c05c7007a0445003c05c700da0400003c
05c700da0400003c060800da045d003c060800da045d003c060800da045d
003c060800da045d003c060800da045d003c047300b8038dff5c047300b8
038dff5c047300b8038dff5c04e3ff9c0400003002aaffc00239005805c7
007a0400003c05c700da0400003c05c700da0400003c05c700da0400003c
05c700da0400003c05c700da0400003c000000be000000be000000be0000
00be048dffb6031f00020754ff900771ffff0550ffc703be00250550ffc7
03be002505c7ffca03f80029047300b804000003047300b80400ffdf04e3
ff77038dffb8058300e703d100560583ffca04000029058f007a038d001b
05c7007a0400003c01ef00b70000ffd50336ffea03de006204000036054b
003904b8ffc60400003604b8ffc604000036055600330556008a038d0038
05c7ffd0063d003904b800260400002703b8000804e3ffe603f6003b04e3
fecd05c7008e05a30100060e00290239004f02aaffc00556ffc9038d0014
0239004a0377ffc0064500870556fecd03f8003a05c7007a0766008e0568
003c054d00390400ff1e04e3ffcf04000013031d001604c1ffb90222004f
0239ff5e0473008f02390054047300cd05c9007a056f00da049d00dd0416
ff5c0473fffc031dffc70453ff5d0453ffdd038dffad038dfff004000020
03b200490311ffb30296ffed042eff1e019a00a1023f00a101fe000a02aa
009a0a3affc308e4ffc3071d00270800ffbe06acffbe0472004f08e6ffc7
078fffc706390027038d001b04e3ff9c04000030000000f304e3ff9c0400
0030071dff940556002d05c7008e0400ff6d05c7008e0400ffc90556ffc9
038d001405c7007a0400003c05c7007a0400003c0453ff5d038dff6a0239
fea00a3affc308e4ffc3071d002705c7008e0400ffc90794ffca04c7ff41
0556ffc70400002704e3ff9c0400003004e3ff9c0400003004e3ffd2038d
004004e3ffd2038d004002aaffc00239002102aaffc00239005805c7007a
0400003c05c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a05c7
00da0400003c05c700da0400003c0400000e031dffed0473008f0239ffd4
04f2ff940321ff4905c7ffca040000290546ffc404e50033045100500473
fffc031dffc704e3ff9c0400003004e3ffd2038d004005c7007a0400003c
000000b305c7007a0400003c05c7007a0400003c05c7007a0400003c0473
00b8038dff6003890048040000300400003004000036038d0011038dffb6
0400002704000027038dffdf04bd001b03270016031fffce0467ffce03bf
003a0239fea00400ffcd0400ffcd03f5003c03cf005803a700750400003c
04000029040000290239000b023900580226ffc6023900460239004f0239
0006046b004805c7003c05c7003c05c700230400fe8404000027040fffe8
0400003c0563003c05a600480456003c031dffdc031dffdc031dffdc031d
ffab031dfffc02df002702df0091038effc603d6ffc6031dffa8024bfea0
024bfea002040014024bfec80239fff702390006040000070429003d03eb
0035038d001205560013038d001203050038031dffc7031dffc7038dff6a
038dffbe034a0007034a007c034a00000389ffe905c7007a0370ffc603bf
000603f5003c0418ffc60239fe9c038dffbd031effc60400002d034a0007
034a007c060c0027065c0027060a0027047b005a0395ffea051d005405cf
fe9b045c004f041a004f041d004603d9ffc00245006f0245006f0151ffa9
01c7006f01c7003d01c7003d02470040031d0081020a000801b6010d035c
012602aa01b202aa019102aa01bd02aa01dd02aa01dd022d00cb022d00e2
0566002705660025056600c4056600c402aa020702aa019902aa016802aa
00a302aaff5902aaffff02aafff6023900610239013302aa00f702aa00f7
02aa00a602aa00a602aa00a602aa000802aa0003030e0105025700aa0117
006f01b000560242005a022d00e203100096031000960310009603100096
0310009602aa006202aa006202aaffbe02aa00ae04730175045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000ff9a0000ff890000fef40000ffe8
000000720000ffcf0000001b0000fffd000000090000008f0000001f0000
ff6a0000ffe80000ffe8000000500000002a00000074000000e80000fec0
0000fea30000fea30000fea30000ff7a000000ad0000feed0000fea30000
fea30000fea30000fdfd0000fe5f0000ffd40000fe370000fea60000fe9a
0000fe8b0000ff380000ff3b0000fdfa0000fe2c0000fe7e0000fde70000
fe570000fdfd0000fe0c0000fe0a0000fd250000fe2f0000fefe0000fee5
0000fe170000fefa0000fe910000feed0000fdfa0000fead0000fe1c0000
ffe5000000650000fef40000fff00000004f0000ff990000002a0000ff55
0000fef80000ff5c0000fd180000fec00000fea30000ff9a0000ffcf0000
ff8d0000fe060000fea30000fd1f00000046000000460000ff530000ff6b
0000ff750000ffff0000ff5b0000ff600000ff740000ff6a0000ff5a0000
fece0000ff9a0000fffa0000ff770000ff4302aa019902aaff9b02aa0041
03fc003d03ed0000051700b506120064051700b50424003c05a6001f047f
000305c7007a0400002d055600a0038e002c04e3ffce03b5ffa70422004d
039c002d059d00b6042d00a10645fffd05c7fff704a5007a042700970630
ffca037effa3045600320456003204f6ffed04320048059b007603f5003c
0322fffc02b6000c047f0003040f00070391003c0239fea405c7007a0339
003c0339ffa104e3ffd205c7ffcc038d00400400003c0916007a0517009b
056600740556002707b2ffc00564ffc60593ff8f0456ff960827ffc00640
ffc606d9ff740516ff840981ffc00714ffc603f6ff56031fff2d05a000db
04f8007005c7007a0400003c055c01000471002c055c01000471002c08dd
007a071b003c06420052049c00280916007a0676003c0000fe370916007a
0517009b0556008a038d0038023cffbb0000ff760000ffae000000640000
003c0000fc2b0000fc4c05c7ffcc0400003c04b8ffc603a4006604e3ffcf
0400ff1e0516ffb6038effaa03f6fffe031fffa40550ffc703be002505ff
00760438003c06f2ffca04fa00290822ffc5058700270556008e038d003a
0556008a038dfff40473009005c7002305c7ffcc0400003c058300e703d1
005606840040045f000106840040045f000102aaffc00754ff900771ffff
0550ffc703be0010056bffb9037dffa505c7ffca03f8ffbc05c7ffca03f8
0029058300e703d1005606aaffbd051bffa4044801cd04e3ff9c04000030
04e3ff9c04000030071dff940556002d04e3ffd2038d0040058f007a038d
001b0754ff900771ffff03f6fffe031fffce03f6fffe038dff6a05c7ffcc
0400003c05c7ffcc0400003c05c7007a0400003c05c7007a0400003c053d
001e0387000f056200e1038dff60056200e1038dff60056200e1038dff60
058300e703d1005606faffc6056b006604b80047040000270669004705a2
0027063700ea052d0082042800ea031f0082073affb90526ffa50794ffca
0590002905c7008e03f5003c056e00cd075a00230000fe2a000000030000
002400000073000000000000fe3e000000630000ffb80000ff730000ff84
0000fe4f000000110000010e0000ffb70000ff35000000020000000d0000
fe6a0000fe8a0000fe400000fde00000fe7900000063000000240000fe55
0000005a0000002d0000ff380000fec00000006500000042000000a30000
00a3000000b3000000b3000001440000010d000000a304e3ff9c04000030
04e3ffd10400003604e3ffd10400003604e3ffd1040000210556008a038d
003c05c7ffc30400002705c7ffc30400002705c7ffc30400000d05c7ffc3
0400002705c7ffc30400000304e3ffd2038d004004e3ffd2038d004004e3
ffd2038dffc704e3ffd2038d000004e3ffd2038d004004e3ffce0239fe9b
05c7008e0400ffc905c7ffca0400002905c7ffca0400002905c7ffca0400
002905c7ffca0400ff9f05c7ffca0400002902aaff880239ff7402aaffc0
023900580556ffc9038d00140556ffc9038d00140556ffc9038d00140473
ffbe023900130473ffbe023900130473ffbe0239ff4f0473ffbe0239feff
06aaffbd05c7002306aaffbd05c7002306aaffbd05c700230556ffc70400
00270556ffc7040000270556ffc70400fff90556ffc70400000305c7007a
0400003c05c7007a0400003c05c7007a0400003c05c7007a0400003c04e3
ffcf0400ff1e04e3ffcf0400ff1e04e3ffd1031d002a04e3ffd1031d002a
04e3ffd1031d002a04e3ffd1031dff090400000e031dffed0400000e031d
ffed0400000e031dffed0400000e031dffed0400000e031dffed0473008f
023900540473008f02390013047300350239ff59047300170239fef505c7
00da0400003c05c700da0400002805c700da0400000305c700da0400003c
05c700da0400003c04e30100038d002c04e300b3038d002c06aa00f90556
002306aa00f90556002304e3ff77038dffb804e3ff77038dffb8047300b8
038dff600473fffc031dffc70473fffc031dffc70473fffc031dff810400
ffe50239005405560023038dff60040000300239fe9d0433003c0433003c
0433003c0433003c0433003c0433003c0433003c0433003c04e3ff9c04e3
ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3ff9c03270016
032700160327001603270016032700160327001605ab008d05ab009a06d7
007f06d700b906d7007f06d700b903f8003a03f8003a03f8003a03f8003a
03f8003a03f8003a03f8003a03f8003a068f008d068f009207bb007f07bb
00b907bb007f07bb00b907bb00d007bb00d0023900580239005802390043
02390058023900580239005802390058023900580372008803720088049e
007f049e00b9049e007f049e00b9049e00d0049e00d00400003c0400003c
0400003c0400003c0400003c0400003c068f00c9068f00f507bb007f07bb
00b906f3007f06f300b903ac003503ac003503ac003503ac003503ac0035
03ac003503ac003503ac0035053b009106cb00b906cb00b906cb00d005a6
004805a6004805a6004805a6004805a6004805a6004805a6004805a60048
069100c9069100e307bd007f07bd00b906f5007f06f500b906f500d006f5
00d00433003c0433003c032700160327001603f8003a03f8003a02390058
023900580400003c0400003c03ac003503ac003505a6004805a600480433
003c0433003c0433003c0433003c0433003c0433003c0433003c0433003c
04e3ff9c04e3ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3
ff9c03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb
03f8fffb068f008d068f009207bb007f07bb00b907bb007f07bb00b907bb
00d007bb00d005a6004805a6004805a6004805a6004805a6004805a60048
05a6004805a60048069100c9069100e307bd007f07bd00b906f5007f06f5
00b906f500d006f500d00433003c0433003c0433003c0433003c0433003c
0433003c0433003c04e3ff9c04e3ff9c04e3ff9c04e3ff9c04e3ff9c02aa
019102aa004102aa019102aa00c602aa010c03f8fffb03f8fffb03f8fffb
03f8003a03f8fffb060f00fe060f00d106f300f606f300d105c7ffca02aa
00e302aa00e302aa013402390058023900580239003c0239003c02390058
0239005802aaffc002aaffc003d600ec03d600d102aa011d02aa011d02aa
013403ac003503ac003503ac003503ac003503d7ff6f03d7ff6f03ac0035
03ac0035047300b8047300b806030104060300d105ab009702aa00b402aa
00b402aa016805a6004805a6004805a6004805a6004805a6004806f30104
05c7007a06f5010405c9001b05c9001b02aa019902aa01bd04ef00ba0556
008a0556008a05c700230556ffc70871ffd106aa00590556ffc90473008f
0800ffbe0400ffad04c10066000000460000004600000046000000460239
000b0239fea00400ffc404e3ffcf040000270239ff40040000270239ffb6
044affe3044affe302aafffd02aafffe02aa002402aa003402aa000202aa
009502aa001402aa002102aaff6c02aa00ff02aa019f02aa019102aa000a
02aaffef032effa6032effa402aaffb000000033000000680000ffb60000
fea60000feed0000fee70000fe1a0000006800000046000000460000fe0a
04e3ffcf0400ff1e0330ff900491ff900556002d0343ffc7039d003c0411
ffc60411ffc6031fffc6031fffce023900090307002a03abffc60332ffda
04ccffda040bffc60400003c03c8003c042a003c042a003c0497003c0556
00360385003c03ee003c03ee003c0346ffc603efffc603370014030a0044
03ec00840471006a057d008004ef00b7035e008c049e008c0337fff102d1
ffdc033600000466ffba032dffc60331ff900403ffc60346ffc603f60092
03a2ffbc0354006304940063035b0089035a008903d60089034100890341
008f03a400de02dbfffa0217008902b900a803f200830332008204880084
03ac008a03f3008503cd00de02b200ad031f0082037b0084031700f203fe
0138048b014d033000e7033000e7033000e7032800850227006a027b0089
021900870219008601e4007801e40070024900350144005b0240006f0356
006e022a006e0249007b0214007202490083024900780243ffda01580098
02580085028b009103720085023d008a02d900690246000301d80080023b
00830271007d0227fff80144000a01f8ffe20258ffe9023dfffc0246ff72
01d8ffe00246ffc90271ffdc0227ff5d0509ffd5048300bd04faffd10475
ffc7049c00c704f4ffe404cb00bc04f7ff85048300250000ff3a0000ff38
0000ff380400ffee0473018a035c00db0400000008000000040000000800
000002ab000002000000015500000400000002000000019a000000ab0000
000000000556008a06aaffbd04ccff5f05cf003c060500270608002d04e3
ff9c0556008a040000720473ffbe0473ffa5031dffed031d000403e50061
000001cf0000feb60000fe140000003c0000ffcb03d7ff340556008a0556
008a0556008a048dffb6031f00020000fe54000000770000fee40270ffd3
0000ff3804000036040000270239fe9b05c7000b040000140400fefa031d
ffae02dfff9f031dffed0239ffcf031dffc70400ff750258002803c5ffaa
059affc30226ffc60239000b0400ff1e03ec00290429ffe3040000360400
002702d6fe9b04bbffc9038d00140239ffac05c70023040000270400ff1e
031dff1a031dffed02d1fea0038d002c038dffb8031dffc7040000300400
003004000027038d004003270016031fff65038d001b02390058038dffa6
024bfec40400003c038dffad033000e7021a007b021a002f0252007b01e4
00700164ff960164ffaf0288007b0258008d0144006b0144009301440048
014400480144ff970144006b0144002b01c5002c032b0065032b0072022a
ff61022a006f022a00340249007a027b007b01cf00310164ff9c01580001
0258006a0262007b025800aa02580083023d008101ef005601ef0057021b
005601effff2024900910000ff510000ff540000fee10000ffa002aa007a
0257ffed0219ffe30249ffe50246ffcb0219ffe005c7008e04e3ff9c0400
00130556008a02aaffed0433003c0433003c0433003c0433003c0433003c
0433003c0433003c0433003c023900580239005802390058023900580239
005802390058023900580239005803ac003503ac003503ac003503ac0035
03ac003503ac003503ac003503ac00350239005802390058023900580239
005803ac003503ac003503ac003503ac0035037d003804e3ffd105c70066
04d5ff8f04e3ffd2038d0040038dffba0239fea005aa008e0400002d04e3
ffd1031d0015047300a2038dff5c039100140391003c039100140239004f
048dffb6031f000204e3ff77038dffb804e3ff77038dffb803f6003b037d
0017056bffb9037dffa50000ffbe0000ffb50000ffdc0000ff950000ff54
0000ff330000febc000000500000fe1a070e0020031fffde039100140473
ffbe023900350473ffbe04e3ffcf04e3004c040000300239ff9005c7ffca
040000290556ffc9038d00140473fffc031dffc7038d003a04ccffca0345
0029046d004a0000006a000000a6000000270000000a0000ffa70000fe6e
023900580592ffc00556ffc70592006e0000fecc0000ff1c0000fee20000
fef70000fedd0000fee60000fec50000fefa0000fee50000fec50000feb2
05c700610400002d06aa00f9055600230579ffb10000ff8305be007a0474
002c06aa00f90665002302aa00b0033d007701b600a201b600f004000099
0400009902aa018102aa017b02aa010a02aaff7404730077040000910400
005a02f2001e03df001103cfffe60400001703aeffd504180084040000b4
0400006b04180036043900970323001404000020039f00260400004003c0
00290400008103b800be0400004e0400003b023900580471fe980695fea9
0692feab0435fe9c068afea903c9ff8803e2ffbc0434004e04a8ffbc03a9
ffbc036cffbc0476004e04c7ffbc0257ffbc0298ffc30462ffbc038affbc
0533ffbe049affc70476004903b3ffbc04760048040affbc0334fffe03a8
006f049b009603c3007605dc008b0405ff9903f6008b0405ffc90548ffa6
05dc0049038affbc0476ffe703b3ffbc04a8ffbc0466ffb003c9ff8803c9
ff8803c9ff8803c9ff8803c9ff8803c9ff880434004e03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0257ffbc0257ffbc0257ffbc0257ffbc049affc70476
004904760049047600490476004904760049049b0096049b0096049b0096
049b009603f6008b03c9ff8803c9ff8803c9ff880434004e0434004e0434
004e0434004e04a8ffbc04a8ffbc03a9ffbc03a9ffbc03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0476004e0476004e0476004e04c7ffbc0476004e04ac
ffbc0257ffbc0257ffbc0257ffbc0257ff8f0257ffbc04b2ffbc0298ffc3
0462ffbc038affbc038affbc038affbc038affbc049affc7049affc7049a
ffc7047effbc047600490476004904760049040affbc040affbc040affbc
0334fffe0334fffe0334fffe0334fffe0334fffe03a8006403a8006f03a8
006f03b20079049b0096049b0096049b0096049b0096049b0096049b0096
05dc008b05dc008b05dc008b05dc008b03f6008b03f6008b03f6008b0405
ffc90405ffc90405ffc903c9ff880548ffa60476ffe703c9ff8803e2ffbc
0356ffbc03d7ffb403a9ffbc0405ffc904c7ffbc047600480257ffbc0462
ffbc0414ffab0533ffbe049affc703e3ffd00476004904c1ffb603b3ffbc
03b3ffbf03a8006f03f6008b047f00350405ff9904a400bd048dffc503c9
ff8803a9ffbc04c7ffbc0257ffbc04760049048dffc503f6008b0257ffbc
03f6008b03a9ffbc04c200720356ffbc0437004e0334fffe0257ffbc0257
ffbc0298ffc305a3ffad05c8ffbc04ba0069044affbe0435005504c8ffbe
03c9ff8803cbffba03e2ffbc0356ffbc045cff4d03a9ffbc05b0ffa5035c
ffe804c6ffbe04c6ffbe044affbe045bffad0533ffbe04c7ffbc04760049
04c1ffb603b3ffbc0434004e03a8006f04350055048600350405ff9904c9
ffb6044c00a5068dffcd0694ffcd0491007905b1ffba03ccffba04370013
0659ffbc0437ff890356ffbc02560056025600850256004a025600540256
00480256004a02560052025600a60256004c025600560256005602560085
0256004a02560054025600480256004a02560052025600a60256004c0256
005604cf003007bdffc407bdffc407bdffc407bdffc407bdffc407bdffc4
07bdffc406b4003c0513007a0513007a0749003c06ad003c06ad003c06ad
003c06ad003c06ad003c0664003c05cb008d0794ffc40487003c0487003c
0487003c0487003c0487003c048effc40723003c050dffe7050dffe709d7
ffc407bcffc407bcffc405a7007905a7007905a7007905a7007905a70079
05a70079062b0054062b00540672003c05c7007d06e6003c043dffb5043d
ffb505a2003c06eb003c06eb003c06eb003c06eb003c06eb003c0612003c
0811003c0673ffc404ad007c04ad007c04ad007c04d9fff104d9fff10759
005e07bdffc407bdffc407bdffc40513007a0513007a0513007a0513007a
0749003c06ad003c06ad003c06ad003c06ad003c06ad003c05cb008d05cb
008d05cb008d05cb008d0794ffc40794ffc40487003c0487003c0487003c
0487003c0487003c048effc40723003c050dffe7050dffe7050dffe7050d
ffe707bcffc407bcffc407bcffc405a7007905a7007905a7007906e6003c
06e6003c06e6003c043dffb5043dffb50400000e0400000e05a2003c05a2
003c05a2003c05a2003c06eb003c06eb003c06eb003c06eb003c06eb003c
06eb003c0811003c0811003c0811003c0811003c04ad007c04ad007c04d9
fff104d9fff10723003c0774008f0884003c0428ffca031c003c0473008f
0423007b05c7006204400027052effc9040000c60400006b0400fffd07db
ffb90553ffa5074cffcf058fff1e0781ff910591ff840556ffc903d7001f
07f2ffb90504ffa5084cffca0577002905c7ffc5040000270583ffca0400
00270239fe9b0239fe9b03b800300688ffc00438004f046b007a03ae003c
04fdffce03bbfec306aaffbd04e3010a05be003704700040031dfff10400
003c031fffe60151fefa035e010b0400000e0473fffc0239ffc60400ffab
05c500d40590ffa605d400c405f30049058100d405c4002904faffb0059e
ffa60722ffa806170055054fffb00412ffb00770ffb005de0089059a00e4
04b7ffd005cf004d05c4004905c1002f068500d505aa007b05a200b90587
005e05b8ffa6059300cb06a4003f05b5001b0657ffa605b800d505e90053
052f005b0570ffa605860068047dffb5063f0088066f000605e800800679
00670199013201fe01430154008d00f7009001a8009201da0065047501d9
05c9003e03cfff200420003f03fe002903e800410416003d0339001803fa
ffaa0516ff200442004703fdff2001ffffae05f5ff2003fc004603c80047
03e7001703d7003a03fd002903d40039040c003b01d3fe8403e6004702e9
ff0d03fa00290239ff2c05b5003c037eff670438002903fa003b03f8003d
05e0003c03faff2003d1fff70287002d05c5003b042aff2a040d00400575
003704b100410239007a02f400bf077a0045077a00450616004907f2003b
07f4003b0809003b07de003d0a01003b0000fee40291ff7e035700bd03ce
ffd103cbff85000000770000ffc80400ffda038dffba05c7fec603f8fe84
0a39ff2d0843003d0597ffba0414ff74056bffb9037dffa5053600180542
ffc40437fe9b0538007102aa003602aa003602cd00e802fb010a050c010a
020000d20800000008000000080000000800000008000000080000000800
00000ab9007f01c001180355011a035c00be027fffbb0800018907a7ffab
07a70113027fffbb0783006c02aa002c031d000d031dff3306d000c60566
00c6061c009a040000b4042f00c803a0007003a0009a0400007302620024
07a7ffab040000d6040000790454001407a7ff98040000a30400007b0485
00db04ec0099051d00d202aa007a071000be051d00d202aa007a01c70000
000000000800000008000000080000000800000008000000080000000800
000008000000080000000800000008000000080000000800000008000000
06120040026600a6015600930266008302660084026600b5026600fc0266
009a026600b5026600ab026600ab026600ab019900540199ff7a02660011
026600260266fff30266000402660007026600020266001d0266006c0266
001102660023026600170266001702660017019900540199ff7a0245ffd6
0240ffd60117ffea0356ffd50245ffd60243ff4101b0ffbd015800000722
006c06d3006c0556005607d900a004e30054071b006c0402007e053d003a
073400a00414ffb9073fffe907e7007c05c7003104000027040000270581
ffca046d005305aa001c05f9003605c7fff10614008305ec006204730031
05c70056076a004b065c007c055600310556002704e3ffd107410048087a
008a04e3008c04e30021038dff6a05f2008205960039022700380556ffc9
04e3ff9c076a0091052b008b0314002b04ec0072058100020473ffcd08ec
0004033f003804bd00a7047a0067034d0047041f0084029d003e07ca0096
08d4003f046400480389000a04a0002f05c7002f05b40035063900b50473
0076047300760556000b05c7ffc304000027038d0040023900580239fea0
051500a9063900700637003e086affad060000a1060000a107c300a10600
00a10600006f0600008206000083060000a10600008403ab00a102aaffc0
0514ffc0077effc0075dffc004e301000774010009de01000a4600c40796
ffc004e3ff7707a0ff770a0aff770473ffbe0556008a05c7ffc306aaffbd
0239005804320058062b005805c20058038d002c05cc002c07c5002c09be
002c05cd0058038dffb805cbffb807c4ffb80239004f038d003804000027
05c7002308e5008a05c7ffc308e5008a0556003705dc008a0514002b05c7
ffc308e5008a060000a602aa010a02aa010a02aa010a02aa00dc02aa010a
02aa00dc036e00e0036e00e0035c00ca035c00ca035c00ca037e00ca037e
00ca037e00ca06b500320000fc050000fc050000fc0501e0ffb70400002e
04e8006004e80043056600960400008e0400006402aa003604540014037e
002a037e002a0454001404540014031d000d031d0030031d0115031d012e
031d000d031dff3305f4001405f4ffd6041b008c041bff20051d00d2051d
00d2051d00d204ec00990400014f02aa01b902d60082020000dc0200002c
020000910200003702aa007a040000dd040000eb0400fff4040000cf0800
ffed0800ffed020000000239ffca0239ffa50556008a02aa001602000045
04730081040000b8040000d40207ffe501bb005a020700f301bb012005c7
ffca03ba002905e7008f04cf005403f6003b03f6ffc3037b0038037bfff2
043500380435fff2036cffbc0334fffe07bdff9c054efff00865ff9c05c4
fff007d3ff9c056ffff006a1ff9c04bfffef06a1ff9c04bfffef06a1ff9c
04bfffef0556007c038dfffa0556ffc9038d00140556ffc9038d00140556
ffc9038d00140523006e026300e50473ffbe0239004f060900110400ffea
0631007a045f003c09f0007a069e003c04e3ffcf0400ff1e0547000404c2
ff6a067800ce05f4008a05c70061040000160680006104ad002d055800ba
03e900660518002003c7ffb604e30006038dff7306aa00f9055600230453
001b0408001b04e3ffcf0400ff1e04e3ffcf0400ff1e045eff440364ff44
0304ffda0304ff8a043affb1043aff380400003b0400ffd7025600680525
00270334005506ea002305280027036b002a0550ffbc0502005403b5ff9c
05c7007a040000370389ff2e02aaffad03c5001203c5ffc203c5ff720473
00c202390045058eff310400ffa90389ff2e02aaffad050f00760372003d
05c7012d03a400760556ffc7040000270556fff8038dffe2038d00380400
00290568000e04ffffc404e3fecd0239fe9b058b00640424000b05c70064
0400000b058b00640424000b05c7ffe60400ffc90556ffc9038dffbf0556
ffc70400ffdf04e3ffd1031dffc80400000e031dffed0635003803f6fffe
05befff504ff004a0556002d0473ffc7038d000d04e3fefc04e3ff3f03fc
ff770739005d05a6004805ec00330386003403c9007b05c7002304e300f4
04e3008e06aaffbd02aaff4308bcffd20431ffc5053cfff0031c0038038d
ffcf045fffee0239fe9b03d7ffb10286000e0239ffcd0239004805ae0023
03f4002703e1ffb1031effd7031effb00400000405c40036055600360556
0036069e003c069e003c03bbfff8040affbc028f002a0403002a03a0ffe5
0486ffe5032b003504ba0035024bfea00400003c0400000705c7002305c7
00230400003c0385ff400385ff40036dfea0038dffb8038dfe7d038dfe7d
038dfe69038dff5c02aa00900292005e01b2004201b200580288003e056b
003d0564ffc605e300380653003c04000042048dffc504e3ffd10473ff97
00>
<000000000000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
0068000000680000006800000068000000680000006800000068000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000002b2000002b2000002b2000002b2000002b2000002b2
000002b2000002b2000002b2000002b2000002b2000002b2000002b20000
02b2000002b2000100000dfa00f2003c0097000600020010002f00560000
04ed0258000400020000000e00ae0000000300000000021a000000000003
000000070076021a0001000000000000010d02900001000000000003001f
039d0001000000000004001f03bc0001000000000006001f03db00010000
00000007003b03fa0003000104090000021e04350003000104090001002c
06530003000104090002000e067f0003000104090003003e068d00030001
04090004003e06cb0003000104090006003e070900030001040900070076
074700a90020003200300031003700200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e0020000d000d004800650062
0072006500770020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200063006f00700079
00720069006700680074002000a900200032003000300033002000260020
0032003000300037002c002000520061006c00700068002000480061006e
0063006f0063006b002000260020004a006f0068006e0020004800750064
0073006f006e002e002000540068006900730020006c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c0020004800650062007200650077002000690073
0020006f00700065006e00200073006f007500720063006500200073006f
00660074007700610072006500200075006e006400650072002000740068
00650020004d004900540020004c006900630065006e00730065003b0020
00730065006500200065006d0062006500640064006500640020006c0069
00630065006e007300650020006400650073006300720069007000740069
006f006e00200066006f0072002000640065007400610069006c0073002e
00540069006d006500730020004e0065007700200052006f006d0061006e
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002ea920
3230313720546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e200d0d486562726577
204f70656e54797065204c61796f7574206c6f67696320636f7079726967
687420a92032303033202620323030372c2052616c70682048616e636f63
6b2026204a6f686e20487564736f6e2e2054686973206c61796f7574206c
6f67696320666f72204269626c6963616c20486562726577206973206f70
656e20736f7572636520736f66747761726520756e64657220746865204d
4954204c6963656e73653b2073656520656d626564646564206c6963656e
7365206465736372697074696f6e20666f722064657461696c732e45494b
414d482b54696d65734e6577526f6d616e50532d4974616c69634d544549
4b414d482b54696d65734e6577526f6d616e50532d4974616c69634d5445
494b414d482b54696d65734e6577526f6d616e50532d4974616c69634d54
54696d6573204e657720526f6d616e20697320612074726164656d61726b
206f6620546865204d6f6e6f7479706520436f72706f726174696f6e2e00
a90020003200300031003700200054006800650020004d006f006e006f00
7400790070006500200043006f00720070006f0072006100740069006f00
6e002e00200041006c006c00200052006900670068007400730020005200
65007300650072007600650064002e0020000d000a000d000a0048006500
620072006500770020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200063006f007000
7900720069006700680074002000a9002000320030003000330020002600
200032003000300037002c002000520061006c0070006800200048006100
6e0063006f0063006b002000260020004a006f0068006e00200048007500
640073006f006e002e002000540068006900730020006c00610079006f00
7500740020006c006f00670069006300200066006f007200200042006900
62006c006900630061006c00200048006500620072006500770020006900
730020006f00700065006e00200073006f00750072006300650020007300
6f00660074007700610072006500200075006e0064006500720020007400
6800650020004d004900540020004c006900630065006e00730065003b00
2000730065006500200065006d0062006500640064006500640020006c00
6900630065006e0073006500200064006500730063007200690070007400
69006f006e00200066006f0072002000640065007400610069006c007300
2e00450049004b0041004d0048002b00540069006d00650073004e006500
770052006f006d0061006e005000530052006500670075006c0061007200
450049004b0041004d0048002b00540069006d00650073004e0065007700
52006f006d0061006e00500053002d004900740061006c00690063004d00
5400450049004b0041004d0048002b00540069006d00650073004e006500
770052006f006d0061006e00500053002d004900740061006c0069006300
4d005400450049004b0041004d0048002b00540069006d00650073004e00
6500770052006f006d0061006e00500053002d004900740061006c006900
63004d005400540069006d006500730020004e0065007700200052006f00
6d0061006e00200069007300200061002000740072006100640065006d00
610072006b0020006f006600200054006800650020004d006f006e006f00
7400790070006500200043006f00720070006f0072006100740069006f00
6e002e00410c005403cd02b0001d001f03cd03cd03cc03cb003c001f03cb
b3061d1f00410c03bc003003bc004003bc00a003bc00b003bc0005ffc003
bbb345453240b803bbb32b2e3240b803bbb2282932b9ffc003bbb31a2632
80411303bb009f03bb00af03bb00cf03bb0004000003bb001f03bb000203
bb02af0027001fffc003b9b2161b32b9ffc003b8b2424232b9ffc003b8b2
363832b9ffc003b8b32a2d32df410a03b800ef03b8000203b803b9002800
1fffc003b9b3282e32f0410f03b90001000003b7000103b700030800001f
03be03bf002b001fffc003bfb2242a32b903b60381b23a1f0f411703b300
1003b2002003b2005003b2007003b200e003b2000600cf03b300df03b300
ef03b300ff03b30004001203a8b2e2891fbe039f016b019a001f03980093
0801400c1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8
ffc0b3651a6632b9ff800173b2196632bd038401170800001fffc002afb2
313340b802afb22e3340b802afb328293240b802afb326273240b802afb3
21253240b802afb31c203240b802afb2233340b802afb21933a0bc02af00
b002af00e002afb5034003212932b8fff2b33a263d32bc03820382038200
3a0800b51f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b
2e3269be03810001008a03810001000e0381b32b2f3210b80381b3515b32
0cb80381b34e513222b80381b3474d320eb80381b246330ab80381400926
473212254358320cb80381b2323310b80381b22a3312b80381b3373d3212
bb0381003d0033fff44015253d331825355b32102526343206252a330c25
2e33b8fffe4024252d330c3a2f33329925aa25ba25c92504052536330c25
323832193a293a383a03182517b80381b42825382504bc03810381038100
25080040101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc
038003800380001f080040151f375f07af07025f06af060222ac2b2e3209
ac2f33b8ffdc400aac1f223222232b52320eb8037fb229330eb8037fb222
3314b8037fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f32
32262c33410affee037f00390033fff8037f002b0033ffea037fb23a3320
b8037fb33f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d32
0eb8037fb2263304b8037fb3494a3404b8037fb2463304b8037fb2213318
b8037f400c1d3322263032322226333832b8fff8400a262b2f3209261b21
328abe037f0001037f037f037f00260800402e1f371f062f063f06039f02
af02bf02cf02049f03af03bf03cf03046f037f038f03031f032f033f034f
035f03050f413a02ed0001005f02ed009f02ed00df02ed0003002f02ed00
3f02ed006f02ed000300af02af0001004f02af009f02af0002002f02af00
3f02af0002003f02b00001000f02b0001f02b00002004f02af005f02af00
02002f02af003f02af0002007003b2000103b203b202ed02ed02b002b002
af02af401a37010030014001020101000901020008001717000000121108
40410b027b02230034000d013d0034000d01370034000d011b401a340d8f
340d84340d68340d59340d54340d48340d2c340d28340d41100235002000
0d021b0020000d01fc0020000d01c30020000d01500020000d012c401a20
0df0200dbe200d94200d79200d6a200d61200d5f200d44200d410d013e01
38000d003d0138000d00300138000d001d0138000d01fdb40f4d0f0009bf
01fd004d000d03b1037f0015001f0215b226341fb80214b2263f1fb80208
b21ebb1f41190206001e0801001f0205001f02ab001f0204001f02ab001f
0203001f0401001f02010031019a001f01fb00230156001f01aeb2262a1f
b801adb2262a1fb801abb226341f411501a8002602ab001f01a5001e0125
001f01a400ab02ab001f01a2003102ab001f01a1003102ab001f019db223
6c1fb8019cb2236c1f4109019b00230401001f019a0033019a001f0176b2
262e1fb8016cb231721f4111016b0023019a001f016800240401001f0145
00260801001f013f00230401001f0123b21e9e1fbc0121001e0201001f01
00b426791ffd1fb80125b21ffa33b80801b21ff924b802abb21fe826b801
01b21fe51fb8019ab21fe431b80101400b1fe331e41fe231891fd226b802
01b61fd026cd1fcd25b80401b21fb731b8019ab21fae26b80801b21fac1e
b80401400b1f9e315e1f97269e1f9333b80801b21f8a24b8019ab21f831f
b802ab40131f82236c1f7523e41f7026cd1f6423721f5e25b80401b21f5d
23b802abb21f55e6b80401b21f5324b80201b21f4f33b802abb21f4e26b8
040140131f4731671f4626ab1f4331cd1f3e235e1f3a1fb80401b61f3924
e41f3723b80801b21f2e23b80401b21f2a1eb80125400b1f2923ab1f2731
ab1f5537bc01c60007018a0007012b402e077f077107690766074b074007
380736072d07220721071408120810080e080c080a080808060804080208
000814b8ffe0402b00000100140610000001000604000001000410000001
001002000001000200000001000002010802004a00b013034b024b5342b0
372b4bb807ff52b0382b4bb009505b58b101018e59014bb0c063004b6220
b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288b801
005458b801ffb101018e851bb0124358b900010140858d1bb90001015985
8d59590016763f183f123e113946443e113946443e113946443e11394644
3e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594b
b04753205c58b9027d027b4544b9027c027b45445958b90146027d455258
b9027d01464459594bb04753205c58b9001e027c4544b90026027c454459
58b9017f001e455258b9001e017f4459594bb05e53205c58b9001f027d45
44b90025027d45445958b901a8001f455258b9001f01a84459594bb80101
53205c58b1ab1f4544b11f1f45445958b9047000ab455258b900ab047044
59594bb8012553205c58b1e61f4544b11f1f45445958b9051000e6455258
b900e605104459594bb01753205c58b124244544b1312445445958b12224
455258b124224459594bb05153205c58b124244544b1232445445958b17d
24455258b1247d4459594bb06e53205c58b124244544b1332445445958b1
aa24455258b124aa4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b456953
42014b5058b108004259435c58b1080042591610703eb0124358b911b53d
801bba011c03d9000b2b59b00a2342b00b2342003f3f182b103c012f5d06
0cb0062342b0072342b0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b4bb02e5358b8016b45b02a60b8016b23445900184569444569441845
6944456944737373737375757573737475757575752b4bb026534bb03d51
5a58b1262645b0196044592b45186944742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b004bb02a534bb03f515a58b1070745b0
4060445973732b2b451869442b2b752b2b4518694475752b2b752b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b2b2b451869442b002b732b
2b2b2b2b2b2b2b2b012b2b2b007373732b2b2b01435c58b8ffdeb31e1c33
18b8037fb52b3318262b33b9fff00381b112332b2b2b2b590173742b2b2b
002b73752b2b732b2b2b2b2b73752b2b2b2b73002b2b4569442b2b0000>
[691 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 104 88 <0001003cffe803c40389003c01974084083a193a021235314731543c6a16
79157a16ac15c500fa1509552e543b6a09034b1554005a150336003c1502
2128293902ab090139263f284f285f28f515f616f53907143b3c3c13090a
262738393a16170533153c1326271b3d2e33331f1b20141b1b202b073c00
060003031f133c1413133c180e0b1b133d28201b3c13100a8a096003b802
03401b3cad134043351340181934134015351f134f135f138f139f130513
b80234400c33251b402e012e252095121bb8ffc0b23a351bb8ffc0b31819
341bb8ffc0b31415341bb8ffc0b32c34341bb8ffc04019232834301b401b
a01b031b193d091b1713171b133d0a77c3182b2b103c3c2b2b2b4e10f45d
2b2b2b2b2b435c58b51b4023123f1bb8ffc0b3120b3f1bb8ffc0b116392b
2b2b59014df4ed5d10edf45d2b2b2be4edf4ed2b103c103c2b10c0c0003f
3c870e2e2b057d10c400183f3c3f870e2e2b0e7d10c40111123939111239
12173910c910c9870e103cc43130005d01715d5d5d5d5d435c5840181518
0b3915180c3900220c393b220c3930220c391e220c392b2b2b2b2b2b5901
5d0103061514163332363717060706232226353437363702062322263534
3713363534262322060727363736333216151407030615141633323e0237
3703c4ae270d0b1129531e4f533733272c0d104baae5622e402c5720110a
152a4a1f4b544036252f285e271915216ab17341160371fdac852312111f
6c177d3b262c2322384af8fee9d440314b9b01356f1b0c111e601674372b
2f25368bfebd8423131742e3c7d94c00>QPOBAA+TimesNewRomanPS-ItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>QPOBAA+TimesNewRomanPS-ItalicMT AddT42Char 
QPOBAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/u 88 def
end
QPOBAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 117 /u put
pop
end
%ADOEndSubsetFont
/DRADRW+TimesNewRomanPS-ItalicMT /QPOBAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/DRADRW+TimesNewRomanPS-ItalicMT*1 
[117{/.notdef}rp /u 138{/.notdef}rp]
DRADRW+TimesNewRomanPS-ItalicMT nf
DRADRW+TimesNewRomanPS-ItalicMT*1 [0 -12.0159 -12.0159 0 0 0 ]msf
210.733 103.091 mo
(u)sh
DRADRU+TimesNewRomanPSMT [0 -12.0159 -12.0159 0 0 0 ]msf
210.733 97.1075 mo
(\000\020\000W\000K\000\003\0008\000V\000H\000U)
[-3.99277 -3.33197 -5.99951 -2.99554 -8.66705 -4.66583 -5.32666 0 ]ysh
214.227 155.179 mo
214.227 169.349 li
221.312 162.264 li
214.227 155.179 li
.0704356 0 .894438 0 cmyk
ef
214.227 155.179 mo
214.227 169.349 li
221.312 162.264 li
214.227 155.179 li
cp
.92929 .879301 .889677 .799283 cmyk
@
260.28 155.179 mo
260.28 169.349 li
267.365 162.264 li
260.28 155.179 li
.0704356 0 .894438 0 cmyk
ef
260.28 155.179 mo
260.28 169.349 li
267.365 162.264 li
260.28 155.179 li
cp
.92929 .879301 .889677 .799283 cmyk
@
319.067 161.976 mo
309.157 161.976 li
@
302.072 154.891 mo
302.072 169.061 li
309.157 161.976 li
302.072 154.891 li
.0704356 0 .894438 0 cmyk
ef
302.072 154.891 mo
302.072 169.061 li
309.157 161.976 li
302.072 154.891 li
cp
.92929 .879301 .889677 .799283 cmyk
@
231.222 162.551 mo
221.312 162.551 li
@
214.227 155.466 mo
214.227 169.636 li
221.312 162.551 li
214.227 155.466 li
.0704356 0 .894438 0 cmyk
ef
214.227 155.466 mo
214.227 169.636 li
221.312 162.551 li
214.227 155.466 li
cp
.92929 .879301 .889677 .799283 cmyk
@
276.557 162.551 mo
266.647 162.551 li
@
[.719676 1.43935 ] 0 dsh
149.887 239.29 mo
208.195 176.194 li
@
205.275 174.567 mo
214.227 169.636 li
210.015 178.971 li
205.275 174.567 li
ef
149.887 239.29 mo
252.764 174.136 li
@
250.323 171.838 mo
260.28 169.349 li
253.817 177.295 li
250.323 171.838 li
ef
224.951 239.002 mo
256.259 177.295 li
@
253.004 176.53 mo
260.28 169.349 li
258.796 179.498 li
253.004 176.53 li
ef
224.951 239.002 mo
215.568 178.444 li
@
212.504 179.737 mo
214.227 169.636 li
218.919 178.732 li
212.504 179.737 li
ef
104.505 239.002 mo
206.711 174.375 li
@
204.27 172.077 mo
214.227 169.636 li
207.765 177.583 li
204.27 172.077 li
ef
104.505 239.002 mo
252.142 172.987 li
@
250.083 170.354 mo
260.28 169.349 li
252.716 176.29 li
250.083 170.354 li
ef
224.951 239.002 mo
37.1487 172.556 li
@
36.8615 175.859 mo
28.7711 169.588 li
39.0157 169.78 li
36.8615 175.859 li
ef
165.829 82.9876 mo
164.919 82.9876 164.153 83.8015 164.153 84.8068 cv
164.153 85.8121 164.919 86.6738 165.829 86.6738 cv
166.786 86.6738 167.552 85.8121 167.552 84.8068 cv
167.552 83.8015 166.786 82.9876 165.829 82.9876 cv
ef
[] 0 dsh
165.829 82.9876 mo
164.919 82.9876 164.153 83.8015 164.153 84.8068 cv
164.153 85.8121 164.919 86.6738 165.829 86.6738 cv
166.786 86.6738 167.552 85.8121 167.552 84.8068 cv
167.552 83.8015 166.786 82.9876 165.829 82.9876 cv
cp
@
172.1 82.9876 mo
171.142 82.9876 170.376 83.8015 170.376 84.8068 cv
170.376 85.8121 171.142 86.6738 172.1 86.6738 cv
173.009 86.6738 173.775 85.8121 173.775 84.8068 cv
173.775 83.8015 173.009 82.9876 172.1 82.9876 cv
ef
172.1 82.9876 mo
171.142 82.9876 170.376 83.8015 170.376 84.8068 cv
170.376 85.8121 171.142 86.6738 172.1 86.6738 cv
173.009 86.6738 173.775 85.8121 173.775 84.8068 cv
173.775 83.8015 173.009 82.9876 172.1 82.9876 cv
cp
@
178.61 82.9876 mo
177.653 82.9876 176.887 83.8015 176.887 84.8068 cv
176.887 85.8121 177.653 86.6738 178.61 86.6738 cv
179.52 86.6738 180.286 85.8121 180.286 84.8068 cv
180.286 83.8015 179.52 82.9876 178.61 82.9876 cv
ef
178.61 82.9876 mo
177.653 82.9876 176.887 83.8015 176.887 84.8068 cv
176.887 85.8121 177.653 86.6738 178.61 86.6738 cv
179.52 86.6738 180.286 85.8121 180.286 84.8068 cv
180.286 83.8015 179.52 82.9876 178.61 82.9876 cv
cp
@
[.719676 1.43935 ] 0 dsh
224.951 239.002 mo
295.466 175.045 li
@
292.689 173.178 mo
302.072 169.061 li
297.046 178.014 li
292.689 173.178 li
ef
224.951 239.002 mo
124.084 173.849 li
@
123.031 177.008 mo
116.616 169.014 li
126.526 171.551 li
123.031 177.008 li
ef
104.505 239.002 mo
115.084 177.774 li
@
111.781 178.014 mo
116.616 169.014 li
118.148 179.162 li
111.781 178.014 li
ef
104.505 239.002 mo
293.695 172.03 li
@
291.828 169.253 mo
302.072 169.061 li
293.982 175.381 li
291.828 169.253 li
ef
149.887 239.29 mo
120.446 177.056 li
@
117.861 179.162 mo
116.616 169.014 li
123.701 176.386 li
117.861 179.162 li
ef
149.887 239.29 mo
293.982 172.796 li
@
291.876 170.21 mo
302.072 169.061 li
294.604 176.099 li
291.876 170.21 li
ef
239.647 394.06 mo
239.647 354.211 li
230.36 354.211 li
230.36 394.06 li
cp
/0 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[39.8486 0 0 9.28716 -38.8789 363.087 ]ct
snap_to_device
<<
/T 1
/W 208 
/H 49 
/M[208 0 0 -49 0 49 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
p](9pp]:Hu"S;[("U5#5#RLhG$k3[W!Y>sM!4`(0'(>l('+#?f(Ae.5(\@\/(`=7f!WWH,'cS-H!9aCa
*?H<m!!XPh+sS?Z-N*uH-ReTe$n3Y/'.3h_#:h>B,8/N,R/d@A/gg]Rmf<=e!\a[1r;lsSn,NPH!]2d/
!6P9D2E*TUrW3'\li7,L&3N,T!W`Q=nGiVS!^H5UJcP`L#XC[.6:4-B!Z(b:!'9KI"<\+A&IeX?!CfTL
!!5[m8]1V1!!l1i9MGQi:-28N!WY:K!!H+q;?0Yo!WZ3i!!6%]"dT/B!!j`J<``Bc=TDY)!WY:K!!QR.
>QA%6rW3+,?h47!?st_N!.k1O!+Pp/!'9KI"_1"I!!",>!WY"I!!39t;n)h2!!$L-!WY:L!!d$h*aesJ
ALIHY!G5X5!;lfuB*&3n!8RVT@f?E/3pltLBEDoH!!$d4!W[$.!!6ssD;,'3!!"2,!!-qIhuEadrW3'\
quH<g!cA'Xr;Zk;EW-"?Ec^pS!_RQWX8qtp!d6srlMq$2)0f]N!!$L-!WY:L!!4ZGH2R^DH@,Sl!.=J?
!dt+Nr;`\p";:h<IN\%Y"FgXXJ:[OskPtTlrW3'\mf3G&JqJCI!!%]N!Wdq-pAb8L7O6:[e,TXp56:m:
AFKR%LJ@o,&`<Wh@f?E/3q31Q!!%iW+8Z$=@#Fpb!K2p2!!8-7@%dQ(!/:OVN]-G."=8$hJ1]XY!+Pp/
!'9QK!fmCRq>^M?r;lt\p](@R'TqncY5e\TOodHko)Jo=P6(uBli?VW!+Pp/!'9QK!gEbOq>^P^MuEbY
QYlNu!X(u%_Z8Hl"Bh)n(3fEO"IY,K?CK[M!+Pp/!'9TL"([Ta')MY1!$HXe!W[`G!!8VkQCS!YS=K^V
J,THE!!FPg!YCsY!!$L-!WY:N!!4C'/,0)E55bN`Lh->^!hT`<joDjj";+!&->rVZ"JDFi%\he[rVuq-
rW3'\q>g6i!cJ-Xp](>&MZ*YXMb!XE!i$[0o)JkXQDLJVV[05tI=7rhQ7+3P!!6`1*W2f8*VlW6VYm=m
2gXuoo)Jn:HNHp@qZ$b<WWHV0g&M+^rW3'\n,NNk9j.2j!1Wog!3Q+u!hKIrq#L9l!gTrYq>par:/6`H
!WrppYd*j$!?e]6!W`RsiW'+&:BCU(r;ZtZ%K]$Wn,V_R!+Pp/!'9WM"$j4#JbK-F&I/49!@Na%!!4qX
T^r-dHF7EF[f-=<[htN9=h(-8\l)!!#W"a>!!NtH]Ndo-!s0@7)#Pcg?\nn+]lF/U)+rif$Xcs9!a#F&
W"fBJ(t\fg@f?E/3q31NPt_7no`,!-r;lu6qu?dc7D\Em"Mt3A?C^cj"iG?^!jWI2!!J6T!Wp11!!L-V
!Xj>:!;ca&2H0_Z`PretMT=<K!+Pp/!'9WM!aGduo`,#X2#[OWAg73S!ZY'Pmf3ArM?<n]Lk5:#"K5&s
!m(!6"N^]H7Xan/!m4!Uh>ddk6373_!gB/6!;-<l@f?E/3q31O(FHQ^!!$d4!W^ID!!:CHL[P3GPthA^
PkG(\HG0F^4^%IY"bk5'!Y3QO!;um!UBln8!!LXM!^0]:!!$L-!WY:P!!=@jAmk?5rVur&r;luHrW!"C
!fZRJ!2oet!)rOj"HiffEROO\"YH&B!Xq?d!!3e5e(k!*eC=U%!a\CI!!$L-!WY:P!!9PDC@_E+e->mR
"uIS*!7;?0mf3JM!Wj^*q#LBo!>5k@!W[ZB!!L2/!Wlm'!!8p(f%pB3`s`#C'EVUmf)PgO@f?E/3q<7P
/-=Jp!!(^N!X79XEsUMCn,NW<J-#eZh"C^OWtka<)O:!r!6kED!.=A<!dQV@r;bjX$'fN4)Q4mf!Z'VD
!!$L-!WY:P!!;"O?h+0tBH$jO!>Hsa2Zg/N!!K^e!Wk^]!!"YN!W\8R!!M$X!_cGe!!+XRqu?f=Wg;QC
$X^UL4fA>\H/Jb_iqrf4!!$L-!WY:Q!!@q=^4l(W!*&mu"'g!Nb3o<1/H,\N>kS.$,%1NS)'f+\q#CR%
6imEjL&1iO+G8_P!!7jW2W4W=j?s&]UAY&p[>b576.l5<@f?E/3rB!Q!!6:uhXCLG\P`>-"./+X@.+'u
1'.Lm\G#t,A30hoTqM&Y"H6%V!^HM]!a.u`l2^>S"E:@Bk,\@Z"Otd"7^1SH!+Pp/!'9]O!e^VHn,NK8
Hi*pFkP,&P!!Qnh!WnoNp](J/Z3!a",4kj<1BIVIfD5IK6?0Wl!!K#+!_%tA!!Fl,!WoOs!9aC_@f?E/
3qE=Q.o(BY!!1nMr;lsFmf3Jn)?KuZqZ$jZ=m/gZ!on_"!!:=F!WdDkr`KGjX,ikS["[98"J.aXEg?A!
"Pgos!\W7.!+Pp/!'9`P!cpaNmJm8qi;NcY%k-lH!9sIa!#5@h"q!@s!X<GPnGiUT'`J.9iD*6FquQk.
h>d`[!'FQh%*/#@";4T6![$4u!+Pp/!'9`P!`0+tm/R.PrW3*1*:Ek.CB=S>7R]cFT`GU7rW3*f..@3?
M;\L;JkQ+$!Kmok!W\><!!M*D!_00\!!Jm8!eTM"!:p0j0)bnPV"=Wgh?**3!!Ve1!Wqg5mf3Ns!WiZ[
HN&U'A>:Q--N\=_nGiOirW3((qu?k1(^^>=h>d[q3Wa:lnGi]d#QeFRhZ*YlrW3)[p&G9]5DoU*]Cu=#
!!IU$!Wj&(!!HTi!WmWA!!Is%!_fZc!!L[N!ZJTF!!7B[UYc%ScS#>snG3.Y!!K@+!oHN,!!+3'rW3*<
9)ASk2-><S#lOf-FJR!\Q14hV8HL6emf3?crW3'jp](HtciO9@HLq1@UR)#`jWOC"!Gk-[!!C(>#@$Qq
"Go,?$pa"V!uNTQklUC0o)&On$9/&X4=lcu1&V.U:);eXr;lsinGiZ!R'..k!!HC*!XIf\!!MHd!^oZQ
!!M^:!Wq'O!!:qfoB$&K!!41:kj&3NQ(R\pkPtV$n,a(2(oN=3_^HcY2li67ojI7h!@&HR!;lg#+D_)\
^4H%Z"_;EN!XTk=!!Jbm!_mn8!!7_)?+9n)!!Ges>B_t"VZ\$/Ir7j'!!IQQ!Wk^_!!TVj!WnQnoDf*$
!WiXt!!%TNf`2##rW3'#pAb3<rW3,=+S>^;cT)%.LsQ-X!!Qg5!Z!]pp](</rW3)noDf#kMZNs7U&_V%
"G6aWEe3uc!?b2;!W_un!!49^eGB4K=onapIIdGj!9F1`gm8'D0D>GIJOBD<!/CFP!_T)NqZ$aL!Wk38
`;l,&"N01"!ibno!eKnD!WiF%r;Zo'7VM]""CrAO!Xt@p_Z0]dIf9BK0_PJH5Q1]aY5SD6:iuF3!'lqt
E&'la!ZBF"Pp9]'!.k4D!!GRQi0Y#Q!X':%i6bs/!"KU#!Wqq_+i\,E5QCf8;>C7q7SVhf^&Xr/"_@3@
[caakdf_20(Y405!!l1=[,GUOK#eT(!!AXcW#bf6"<F>8IC5.:rr@Q~>

%%EndBinary
grestore
np
239.647 394.06 mo
240.94 394.06 li
240.94 354.278 li
239.647 354.278 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
241.466 481.187 mo
241.466 445.499 li
231.27 445.499 li
231.27 481.187 li
cp
/1 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[35.6878 0 0 10.1967 -126.006 361.268 ]ct
snap_to_device
<<
/T 1
/W 186 
/H 54 
/M[186 0 0 -54 0 54 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
pAb3p!qucs"S)O("U5&6#RLhG$k3[W!Y>GD&\.ng!!!Z"!!ErL'c%V^!s'5Vo)Jk2)\r\R!s9MY*>.oD
Q2gt-+!C%Q#65nk,:"Q^$Mso*-h@<A"XkfL$lo0I"Y1Mp.4d'T!8@JU/h[;\kl:]<qZ?j01@G2H1C=3d
1c=@pU&Y?L2?s<d2sLAE/N<t93=#Kb!'9NJ"$6Sl4J2]B!!b)=5!M:u6::YQ!&s0C"@NSc!=A],!Cd^j
!!5Xm8D4'M!!u4h92&&I!s9N<rW<-Zl2Ur_"&Jtpr<!*<;?61d!X;S&Q2pXZ!$;+A"]Yn!5uo*,!rt:F
!!OSL7fZUmr<!%&n,NPQ>$D0X!5&:71/_@_=8`+!?N($,2sLAH?NX[9/ReS[!?XN#!;ZZs@KU,!!;?Hn
?N($,2sUGK6tBja!!$V0r<!$InGiW'"),^T]Dqq<rW<-ZlMq!#;[31#!,DH7!=;0c!!4`K#68Ol!!*(+
rW<-ZlMq!&")[u:!,h`;!=*Q7!!@1EEEBjS`;fmErW<-ZlMpun""aBN!HN8[!ruKq!!76E?haWI!!5>=
Flr`+*bTZO!!$@)!rt:Z!:Kmi)H_2%qu?^Br<!'qGk:t;GlrB4!!@QM"!dC;p](GE8-8sBg].=\rW<-Z
li7*9(esl-!.XnK!'9`P!\+;&mf:u?"G$XW'S>WN"G:7f(hqb*!+,X,!&sQNp](A.",-OO!<io1!s++1
p&G2MLl$;o!!J1;"!!9e!!%u\#6P6lgAh4[rW<-Zli7)6"&Jan!C9Z_!s">S!!83[9]Z93!!Ife!s=YR
!!JDd",N,o!!$@)!rt:I!!$(%=Bfb?!!&5]!s&]`pAb7b!u&NO"Z&LJ"-bD/!!O:+!s=jUq>fFR!+,X,
!&s9F!gj(Xp](;_r<!';JG0$F2H-+#!9O7aS-&k)Fn5S9SVmSMT%F#C?N($,2sgSH0`sN6!!<3$T:l,b
!29/f"/85Z"i(*@SlGjtV"F]jV#pf+K'r^(!!$@)!rt:I!!5+^P4nqVVYpSt;ig_S!iH.!dK&Y7"C)WC
"&\gn"eqsu"0/EQ!!$@)!rt:J!!A"X<EAho!+>^,!'9oU!b_[t]`82;!s>31q#CQ#(B]S3j8e`N!+,X,
!&s]Rp&G2u#?`YQ!!*]Qr<!'NLALrQ/[,>\]Dr)>Z3*jQqZ$^G;ZhjV<7CmJ?N($,2spYIZNDrT!!#=_
!rs_G!!@rk><M*Le,TW%=9AYBrW!*7Zi^C?Ia\8s?N($,2t-eM!!'A.T(N'aT4Rs'!4D\(!e(5]\H!#"
!s<a4!!%-I!uR$l!8IPS?N($,2t$_K"eu-<oDekOr<!(Y;Z$LrO9:L!!8@J[[KcmS\"-7rA[p+f!+,X,
!&s?H!dFs\quHKl!C%=t!s#S'!!6X4CUX9E\@VV@!G&h/!9F1\?N($,2t$_J'*E+C!!*_Fr<!(S^&A!6
G,uF5eH"V0"tdP+!s;ONcN!rOrW<-Zmf3F(")7?,!W^#7r<!%]rW!"O;_#0T"aV!f"'''p!:Bge?N($,
2t-eL)KB(=nc/\'_>OH?Lcte=S--XO!:0[j_ZL"6(BYKuci=&PrW<-Zn,NQ2#>Hf?!!'t9!s'6:"98G:
"3%_L$-&V?"38Ib"3D_@!;?Hn?N($,2t-eKJHI1e!!15Er<!4g!!S)""i:96!"7#/"3n(N!'(,`TZ5C[
!+,X,!&sBI!X8a)mf3?7r<!2IcF[$$quHHk"*T8oT?@3;3WfJ*DuBY=cqX\KIFJ5t!+,X,!&sEJ!sQL\
8acWZ62UfeCjuOJo)JqWdF't\5kY0Z>`OTo!!(:HA-2pOqu?nDdfT[]eC4Hu?N($,2t6kMeP9U+mJm6N
r<!.X7L+21!!%KQ&1bdu!s<E8!!@QM"4l6-"D.oA:=o:A"MOs??<l"\!+,X,!&slWoDesF"$5fL!G5:.
!s)VFo`,&$"+1"I"#g;aVtpArfgPuFDVY9qB,C_QNqrbT!!M"S"'%Y<!!$@)!rt:M!!9P1]BoS!"Ut;2
!6Fg5!^C6erW!+WK`_E=!;c`rg\q9T/D^@0g]IXhcLh/?IoQSL1"QC*?N($,2t[1M!!<C/Mh^Qu!,h]:
!8[;J!jMifrW!'m!WrNpq>^ZP!s;Q,hZ*e070?IMoDf",W<350!+"4W!+,X,!&sHK!e=45lMpsd!r`9&
;pP(:!X0[Gr;ZtG!s>j4q>^RV!s8Q\&`<WlJ^"9s..I9?h?*icgXuQ,?N($,2tI"O/`-ZVrW)<c!8RPU
!B4uk!!8Vli;N]Z&`Efo;#1.paqOp[Pi)NE3s,Qk:[\8dZ&8]$SbiEG!!*Z<rW<.)o)Jm.(B`[^!!%ZN
!s,e]p&G.n07Nm#"@%eH"/Yho"9DL)"5<PNkl:juL][`rmJmD&ir]DEEngWq4j3g,!=B#+!!S,=Qsd<,
rW<:"!HNoHq>g0g!t586k3i9Qk5tft1\q(SS-&j1R,S)KVcj1\d-CZ7ecQ"qeark.!!A!^63mJl"&<^*
I/EsG#%`_f!s8e>6Sn02",m>?Idd=?="=@Tj7rZXkQ:o]L[Y<8!!A;bbJrcH"/LhW^uYP#^$/bClD)Pu
!s_S@/*^=q@5.T]!E0j3!s!f@!<)s#EYT=4n,NT5MZX(/q>^X2A-2qEi;`r0)sc\f"$F?+eE[,3!!-,#
m/mhi;F#?LC[>M9OtL!k;XEcN!FkEa!!KD+!sn;j!!M^0!s::#!8IPY&`ANpAn`.W;?Y!IY-H3n!!?F-
"7Q$c!(R+n"'+]B!7UuO6jWqt9_eYk,m+7m7/d/e))K84R/dAn\cW&1q>^X:X9/RorW!!<:4%Qmh#IQq
<<E>Rq>^M6rW</PrW!!5")kjQU&Y>a\cW$8q>^Za!s;J\rW!"H\oRQGJcOp5"JRCK"+g=L!1s/l#$RAo
!-!/PZN.!*"1&(3]_qg=I)c>RL]\4#!!"ImX6ot>!:Bh#IUiO#Y(m"X+r@7N^&nH]HnKX6W;s4(&i(a`
ZA"*Y6Yn=S/VJp"?D&ckj8c@`J,~>

%%EndBinary
grestore
np
241.466 481.187 mo
243.046 481.187 li
243.046 445.618 li
241.466 445.618 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
262.961 288.646 mo
262.961 255.504 li
253.865 255.504 li
253.865 288.646 li
cp
/5 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[33.1418 0 0 9.09567 66.5352 339.773 ]ct
snap_to_device
<<
/T 1
/W 173 
/H 48 
/M[173 0 0 -48 0 48 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
p](9pp]:Hu"S;[("U5#5#RLhG$k3[W!Y>sM!8IPS'(>l(',1ok(Ae.5(\@\0(`=52q>pa(*$$*Z!3ZA(
+!;`s!!XVl,UFcb./a2J#:]9F$n<bY/JS<g/h\n51+J@c!&F^62$,]&!!4hU2uNdX3:HnM3<D6'\,b+\
!tm^Z55kT`5O8@P5ScXPrW3*f7.C6Y.0;s"!3Q;-"\)!Q8P0$c&,lV15O8@P90u<Hr;m!p!:g*k:BF@W
!!E9%,Z-r.!Wl7u<;lq!5OAFR<E<0$=T&:%=X*D:!a7Wh_>qs`#Y\Ao>[:ZC!&XZV!'fiN"^hBF!$_sP
!Wc_=o)Jl&A7ZtS!1Nrg>5eR'5OAFS+Tab+!+u02!,(m'!ac^VScJ*W!*]@'!'flO#9mjg.KBGcCAn88
")IN/!c.p5bQ,?W!*]@'!'flO!\t!tr;Zh8r;lt&oDer2%q#/5bl@c`A*O$pE<Y5"!*]@'!'g5YpAb88
!d";?!H^3u!WbK-p&G/;2]9U8"*YH(H0bM613t'i!9!nX>5eR'5OJLQHoc]R!!%KH!W[`D!!4l-JCX_j
!!IiS!d]Id!!I'A!`jF$!!$4%!WYIR!!@4nKSB=(!/CFR!JcL*!!4ML+2n3_M,FD4,k(d:FCbLnMr+L9
=ona+!^H,R!ZhE%qZ$YVNrB(\)is^n!\YIR_uKq&('98So`4sk"=si\%X6b0!*]@'!'foP!ZqK-q>^M[
r;lsBpAb7'%@,lPj8]=KIKBS;o)Jr(Qi[>:NSXX8>5eR'5OSRRR0&iR!!/Q"rW3+jOSJkX-!!RR!!Ep5
!WkOX!!I;4!WntS!;QTp>5eR'5O\XT,'lF&q#CDer;lsgq#CJh!c5[Q"*$R-!W\qg!!IJ>!Wk45!!$4%
!WYIS!!6//U\FfiM_=u1!MkPJ!!8B_Hg:[_!!Ql/!Wo6=q>^YS0*23Qg&M+VrW3'an,NSF!iQ)!q>^P+
HMmmF:AY"nNItqTp](=pWTm[h0dU>i!!K;'!hU,'!!I6W!YDF!!:Bge>5eR'5O\XSBEG:0!!'/"!WfH6
qu?et3gf[B"0Z8@3r&gW3rZAY!WrZU5(2eup&G5G!WoV1rW!(DZ3!(nfDknTrW3'anGiZ2$tU(G!!+Q.
rW3+/[/9n*3<HV`!!4_R!X(m!VZ@n<MZAe:!W[-:M[,!![sA)W)S"`+$;^d*\K_)"NWLW?f)PeSrW3'a
p&P!j!g4,,o`+umr;lt3qu?dsC/"F'"Ck(+[O_.R"Khe-]Q!ZH"2+aCL#;q:^(:@\[#+oBD"I_f!!$4%
!WYI]!;HNq^]M=E!!+>[rW3,:-N3uHKapiP!!<fc_@lYE"N.kR!lXj6![M3mh>db$('6)i*'s<!hZ*X[
rW3'anGiX0!b1g&!L4&l!Wa7[rW!#;2.u[a!j)Njp](FZ;??okp](AW"3:9=j8]3*2Z<aYDg'Y2!*]@'
!'g#S"!Y8q.eE]@_#4<7ZMjh(a8l@ap](B+ap%P?!5AF6!6P!9!g(T2h#IGGrW3)=e,TJPrW3'anc/a$
6Z)Dp!H:!s!X<(W!!(5OP5,(ZHXY1n!!K_3!YmKc!!8<33Ssf@G0U-j'ES=9+k6Pm>5eR'5OndUL'#]l
!!#jo!X5:u,%],dq#CJ._3"El"G4bt!fm'V"98GL;Kq%!$?g7f!lZt@!Wo&>f)PeSrW3'anc/`k!n-]@
!rr=$%fQM4"#@b*Pkb:\@g^NU!!Lb'!WmoH!!9r'OPp0JLjfC,AcMgre,f]KQ/Vf<!!$4%!WYIV!!?_&
'SZ&W!1<]d"4bHo:\atl,1Eai!!K2$!ZPJ?!!+BPiW',^E&Ib/'E%n7,+&E5eqMcW!*]@'!'g&T!aej&
n,NK2<rN.&5#'4#li7($!WiFn9\'1HK"h@qfD5IMfE)+-QJ)<=>5eR'5P"jVTE;_(!:g*i;u?[t2Il+S
"=2Y%!kHk^"=0!/Ye^#6"PNnY(YeEZli7#hrW3'ao)JjI@79Pa!OOKX!WYaW!!JE'!Wl3V!;HNs1=-(5
aS#T:P8aS+h:qu1>5eR'5P+pXLu)^&mf3BJ^]"98)mo5;q#CO\!Wk!]fDl&U"p2V:oDf"`/cq&ph#IFY
rW3'ap]16m!Z2HYm/R.DrW3*X7-jmV703P6-J/;$7fi`s'(c/,\4ZlUW;Q_T!!(sV!W^12!!;$Za6`j1
-5HXaA9R>?"c*Hd!Xk"R!:Kmj+T_^)EUj)41TgcuiSFP7T)Jckiq<?U,X!a]6IP6$"4dMTbl.V2!!KY6
!WpU"!!RQ'!Wm8!n,NXHiW923Q/M]FNNN<a!WjAuqZ$c,RAI(Hr;m*h(Z4:XnGiXo!Wlcr!!'M-!WYO?
!!C=E!oWVLqu?kcGQIpYk5Y^cj\K\S?0;%d#AH]ka[,#t2uNd[-kENnr;lu_nGiZ$Xu1gt!!KP.!pM$(
!9O7_-0jg^!!@qKB/A]N!);qa%N=\bGO6q9*a@(?@Ka%Ao`4mi!EGWU!!SJE!WoYOU]:PumcVT_+8CBi
mu`GSaiaYeTGmq6RF)"k!!)Nf!WmoQ!.k4*!!SW\!WqmcXoPR("Y'f[!fE<!!.k4M!!Mk$!Wq/7!71]G
?2am*0Xq,7!7CiOLp&>14P/is!X6%[Y8AMt_#U;3"X<6b)HIgS!X':l#h_B0!2T[G~>

%%EndBinary
grestore
np
262.961 288.646 mo
264.253 288.646 li
264.253 255.662 li
262.961 255.662 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
155.393 149.913 mo
155.393 116.54 li
146.105 116.54 li
146.105 149.913 li
cp
/6 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[33.3732 0 0 9.28716 205.268 447.341 ]ct
snap_to_device
<<
/T 1
/W 174 
/H 49 
/M[174 0 0 -49 0 49 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
p](9pp]:Hu"S;[("U5#5#RLhG$k3[W!Y>sM!8@JR'(>l(',1ok(Ae.5(\@\0(^q9#q>pa<*$$*[!3H5&
*uuKo!!XSj,:"Q^#Q4])#:K3F%KHJW.4Qi!!Wjr+0/,+9OT5Rc!&HGh!]KBF!]L0?r;lsZn,NPO!\HLG
!7LoM&j/<@rW3'ali7,Q(-rH0!WbVTnGiUn!^u8QW;m2m7Rp!@8cf&)rW3'ali7/]9MJ7`rW3'qnGiVd
!`59bq#CIj;,[Ap!`N&urW3'am/R8i=',H*r;m"'+n>U7>8phg!6P9I?!^02?t!LE2#[OV5OAFS@fd;D
A/,"E!?5VA!!6bF;>(!R!!$^3!WYIX!;QTu+9FY*!,;B5!(c\]!\$!AV?#WV!,2?5!'flO#9djhC]FGi
6N.#e""EjB!c8!7eGurV!,2?5!'flO!\kWHr;Zh8r;lsAoDer2=)c(X!$^Y-!HB:@!!6g8!W`?emJm</
!d";?!H_9>!WdFep&G.,GBh%+!dSu:o)SRd!_.B[huEajrW3'amJm<6/URBq!'gD`!%[aC!dkQ-iW/!=
"%33>J*d4<J/SK?huEajrW3'amf3HAK+*G2!!%`P!WiFX7J?c`LB<:M!!G`I!Wn8J!!I]O!\Q7o!;6Bm
B`8&55OSRR>QTi\!!/#drW3*=:\Ohj58B0q!!/+@!WiFOnGi]<!WnI:hZ*XirW3'amf3D2!fHgS!/pdW
!$M%:"!NeiPOJS$!!JN(!eZd0!!FbX!g]20!!$^3!WYIS!!<4g!dshE!>/90!We]pq#CIF&":96"Ig,-
8eL^r"D*u&S=T?RkPtTrrW3'an,NP6Sj$ud!!&Yi!W[`G!!8ep0?sRg!!K!i!Y1pu!!JXS!i'km!!$^3
!WYIS!!62sO8&\UV&K=7!KfhI!!8&h.K'7`!!EmV!Z[$l!!FAp!Z`TA!!$^3!WYIa!:p0l2ZflO!!/$R
r;ltsqZ$_W'W>X9!!AFaWegSB#cju,XK&>'FC!Z%"I1qJ(9[N7"A`)#L-sYp!,2?5!'frQ!j;YHpAb2t
r;m#)B)DW1.Xn\p!!6\n&GcG1U^%,VrW30>W-ouk!9!n\ZO-b4D>aG;Zr7%6(telhB`8&55Oe^UK!r-$
pAb56U](;pU]?bZ!!51_X7?5m?+=u>rW3S?\g^!6]=PX.]i"nIR_IYZ$Q,fD)^YOb^BXhU_;51h!!$^3
!WYIT!!5N:3V<@PMZ!SVOSf([T+tZ#!!Gam!e/#]!!OTL!Wp7ohuF)a_+Oh@`.ooG<AW5,!,2?5!'g;[
p](@W!^$&T!Q>fQ!W`BLrW!"Q`lIKI"?uqh$,6-6"W3s8!`b3:!!+lUr;m!91ALq,!!$^3!WYIT!!5]?
@e9X#aSc/?ZMjh*]Geo\!!FL9!WlQu!!(1@!W](r!9!n]Cj,p^30)Mh!,2?5!'g#S"!Pi-D"I]-48f3^
`rH)A!6bL'mf3K;;??pEo`+u!rW3'hh>d^5U&kB[Ze#0Y!!$^3!WYIU!!9u70(T&D-oh2-#,DA%!*]\;
mf3@5rW3'Qo`+tqrW3)GhZ*](d00Tk)$3Dmec5\`rW3'anc/`m!n-W>!71TF"`FAa[gSDg!!I0@!\>et
!;lftN>2?n!&rg9$&BQ&G?e_!!Y3]2!!$^3!WYIU!!6m:&buG'!!-+1rW35P0u\TGmf3NC_ZBniB(c3)
0E)"R$>eZ$$Qgo$#*f/gSP0))Pir,;!!$^3!WYIV!!?h)'SPuV!7q)M"4t`u+7B14fJN^3g%GCLN(F'P
(74:dp](H"<s!0Dr;Zu3'EV0@f`2"crW3'ao)Ji$;k!1U!SUWS!WtX:6G`0l!WW3irW3)"p&G4c!Wpk1
i;a"f;Z_3_qZ$a?Ooc/sg&M+drW3'ao`,*p!&"DXmf3>equQmWB(#^&gB%Ed,PV6BE3B<Ega_7_"MY0C
T#(4&"@InF;f2=1irB'mrW3'ao)Ji0UpKLi!LFAr!WYaZ!!EJ#!WpOA!!nc5Qe#4>BAJ14!:9ah7P+\b
1\UkP,Bs8/-JSS$B`8&55P+pX7AI>Umf3BPhYmQW)OLF'nc/e?/HPu?r3cibUI#%3BY7s8!!Ih$!Z*Wb
!!L#/!Y?m<!!6g8!W`?eoDeq0&'O>?!4)S*!B%4P!!(pU!W`U[rM'NiIKBS'Lu/18.>@oR:\Okf!!L%U
!bZ!!!!(^O!W]e'!!9G-i9^LJ,o-O`G`M4m"g7t/%j`CtP6V8<7aV:3^B!6n"M;PQ/?J@A"LM)/_mnS(
!9*nY!*]'r"X?/A!_a3t!;c`u6imEomf3NOGQIq>K)#BL]#FdQYi>]dg:%.2QgXnWXqh(k0^A`5!!/:g
rW3+`1]%.TV3oN4QMgjf;I6Zgf^SqD_?'dKmf3Ks2$*i_pAb>6!WiRGj8]7s!_`Tbm/R5163?31!!^#g
jIje+jno/bCI_Oi6&!cIr;m'+&*JE?!W[c@!!?i<23%&)!%.[H!&+'H"O[>Qk<.f*!a3(dlMq"!?KgPP
!8d2H$5o+u"D'&:>hBXZ"4P,R"n2Km<cma0"G$UU6?)Z!"NUWG;lRP4mf3KjF)<QPpmVDNY-]P<c2\"O
OTGU-PP>+]PI:Mo`k1[>JcPTH"FD^%![.4;"XVY"!k0tX!6P9Eh#[Wr:\OhhcMdkG:*Im_RfETL!WjoI
pAb3HrW3'Xqu?aOZ\/>F!!R!!!WiQppAb3,rW3(lqu?b8F0bk[!!HTI!WmZ@!!'_3!W_Na!!8hqbi/W<
!71]H7F1r7!(Z__!-8&?!0@*Z"-0<[+j^4b!!D2gOdu@O"Jc71<H.d7$BC/K!h9iXe)_9QrW%NMoDf#k
O$q`krb_jilX-qRq#C\\m']e0P!35YXT7qmJ,~>

%%EndBinary
grestore
np
155.393 149.913 mo
156.685 149.913 li
156.685 116.69 li
155.393 116.69 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
339.556 149.913 mo
339.556 116.558 li
330.317 116.558 li
330.317 149.913 li
cp
/7 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[33.3548 0 0 9.23929 205.268 263.178 ]ct
snap_to_device
<<
/T 1
/W 173 
/H 49 
/M[173 0 0 -49 0 49 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
p](9pp]:Hu"S;[("9ei2#7(VC$OdIS!Y5jK!8IPS&b#c'&e#Ef(&J%4(A%S.(Dn%c!Ws>M)\Cs.Y5eVD
*?O_N"s4s2+sS?Zr;m!H-hIBI-n-Vr/-5l)*\K*"0ouA81'9<9!]96D!W`?[r;lsWn,NPL!]W3M!7q2Q
&3;l]rW3'^li7,,'0SPY!WbMNnGiVV!^buKXoJ_p6q'R8$j$JFrW3'^m/R8D%gbcurW3-P3<8UM!\4=%
PQ2$j!(om%,m"-A9htZh!'KWK"A^=?!##53!)`7d!X_h(_>qs`#YJ&'<E;7a!*K4%!'KWK"^(n1!$YYH
!WaWQo)Jht%UST(RfEFqrW3'^m/R;r?sE[3@Jp6-2Y-nM@KL&2!:0[c?iC*,4RN1SA3XX;!!$YFrW3*/
1@tPJBhU5)!58F5?iC*,4RN1NC'&2M!!+0Xr;lt9o`,(]DJq9+!6bECE9R?'8eKt]!+5^,!'L#VpAb87
!cn5>!HTRd!W`X?p&G.qFEPP&"*P)P9'cN[GBeBgi;`jbrW3'^mJm<7'hJ9'!>'VV!W[WA!!6:)IF\Df
!!I`P!e3K'!!Fn`!e>j\!!$C*!WY@O!!@h*KHL*l!/:@Q!#tV3!eq1j_uKpqBEC#An,NT?L]VfshuEgc
!WiB(4RW7OM#rS3!!,?CrW3*13qr[W&/^?J_Z0gC%KZu.p&P$k"H<Qd#q+U1!+5^,!'K]M!b2:7q>^MU
r;lt9p](@DBTM'OirB3;O9-_Jo)JoFC]YoFh>dO_rW3'^mf3DtF=6nb!.FeI!Kq'j!!7QM!Pna=Jf=am
PP"nYPa)<96KJ4C!!$C*!WY@P!!<e!$YK58!G6]X!WdD1q#CJa!h-n)!b@c%!<P1R!!JgN!bb!W!!$C*
!WY@P!!8U2SbN0b!W<'#9cs64".i-r&aKGI!!Ek*!Wo%j!!K!6!huIE!!$C*!WY@P!!G[kU]:Dk!!/;i
rW3+6CARu4V3YQ]!!@0[R!/D)!1<b,"ILg>02p[,"[cSt!c(1$!!HQ*!Yq^%!:Bge?iC*,4R`=PO'n[U
!!#+Z!W[$5!!9/%X7H;lFsd%e$Zp&5/9CppFK?F`Pj/8B!!OGc!WoMZrW!(iY6(qVf`2"ZrW3'^nGiYi
23OR*!!-=BrW3+)Z2=S'Z=($3!"/c,B!F!L1]d_d=>0Y$#VTg,[']r:[^Y)n$CLqs\.J_O8HKSYfDknY
rW3'^p&P!j!kJF`o`+t]r;lu2r;Zpu8I?R.!!IcQ!`C-8!!GH@!WneH!!p4=!d]$u!Y`9?!94%Z?iC*,
4Sf'Q!!9k9NV*8P^M*TJ!D/OT!!5ptRI:+Y0F\'bZM"7u62gocXkj$^^aoOp!l9`g!8dbV?iC*,4RiCQ
_@FKU!!'t9!WYXf!!9M/I.%%8`Voo=7.pTa-_^YDHY!'TiW'+e!Wm&TeGoSVrW3'^nc/c``u&F\!!#Id
!WZ[.!!((@![I.6"N^]HQ?2a""f2q8!j$t1!!P(r!WnZjeGoSVrW3'^nc/_F%^P[+!F.5U!X=:R!1lgl
1%,)FH3+.-+SGd="AAju'M.-^"Z"!t9KrRZ9XN@N!+5^,!'KfP!m1SRnc/YKr;m,F!4/D8mf3K0;??n=
p&G*nL&M,S#tj.V#s^TS?pZ8(!d%Pr!!$C*!WY@R!!5Vt.J*TB!!$Z+rW33[B#Ohqmf3L8BEA7\o`+u.
rW3'ci;a7:KE=i$!!(>?!Wl`g!;?Hn?iC*,4S&OT&.9L#nGiR9r;m'a.qm?!!!I9C!bg$U!!U&L!WnWt
j8]Aa!(]T]U8n.l"B/"r!n5g&!+5^,!'KiQ!\]khn,NJP-2mrIeTdGK!!I*>!k*^T!!SnC!WkJ4iW'+X
ecH'-qZ$a1fE)-(g&M+[rW3'^o)Jj9!ic/!o)JeGW;H\s<pp"kJNj2;_Y4$6VO%?&fn/2`"OUc^5)o@<
"YigT!ns79!:0[c?iC*,4S&OSfG1a]!!(.>!WdCPmf3J1?igD0qZ$jn0<Km//>(\_!;?Hr06dOFF8#Y<
Sl#OjgbIUb!+5^,!'KlR!cS7lmJm81_>XK:%3b?Dqu?`/rW3'.r7)"T32-H^D49A_"DTdqKAH/""Ps1]
h[nWE!+5^,!'L#Vr;ZnfBMIjo!7:]H!E*Ou!!G4^!\?qA#QY?<rW3,Y_r(Lu+5R&#Z8(tO"Q9ajYf6SA
i;`l;rW3(QoDer$!b(Hr"H@L)!fudM"Ym1^!ol$66O.3O3Dh(KjB(sRmf3M5SH8lST(2ja05^h0@c%.c
1]@FUk4ScYZcFEo%(bj,"D3eu!f-aTnc/gU)?Ksrp](H\!Wks"j8]<ng&_>Kmf3J<J-$3jhuEiC!WiE)
_4:B&"NAhe4G3S6">+HHl7)6'"24i@0CJlDD#sc\0),DLlg+ZS7H=FNLB7P@o)SXf"L7=qm_e5g"ttDn
f=*PpquR,,dtOUeIIU56!Wstg/1(5r!*Sgl"!AFlT'lX^fE),USG3'f+/f5B494IC!a"XWlMq$WT.:N;
!!(sH!Y-fnVS+Hli?R=E.af<bAG#s#!!/N;mf3K$#Qb'mpAb=>(]jb$Y5e_+dVZ%a`V?;5/n1SYUs8rC
d\6dE62(?^/mn_^TA9L+!!I9C!d)lg!;lfsbPhPC.uXJa!!M3]!l81:!!'G+!WW84!3cG+8f.U2:A4_h
1:I/`!2TPn!_Vu]mf7q>"L504!`A[l!ODn-!WZ^.!!;>Dl^e+*!!HeR!Wqib!!T&$!WjZkr;ZoW[Xu^'
f)X.t"m]t+!as:I!!OI+!WmJ2rW!"@-">1#V>pb::=ZP(r;m'Q$e:gD!!t^Q!WoMQTd1B0quD<KpAb=O
TX^Ujr>#K3hr$ir!!erhMbH@D_=OZ,p&KU~>

%%EndBinary
grestore
np
339.556 149.913 mo
340.849 149.913 li
340.849 116.69 li
339.556 116.69 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
203.265 420.198 mo
203.265 413.044 li
195.701 413.044 li
195.701 420.198 li
cp
/8 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[7.15414 0 0 7.56377 -65.017 399.469 ]ct
snap_to_device
<<
/T 1
/W 37 
/H 40 
/M[37 0 0 -40 0 40 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!!(pX!s/Q-"lKCa"pY8:$2t84$Olk4!<N`,$3C\J"o&*"&-NUD&ci+Kq>gU2(&AOI()If*)B0[o!<=/:
"99M>!<=55"9BVgr;cmBq?-dCq>gR1ncSt=#6"W'-2I`E,PhE@'_);+-N4#G-i*rG,PhE@'_);0&L[Y\
.4Y2t!$h=@!#4o*"=kGm/1p`%!$h=@!#4o*">2>.0JWG-!$hFCrW*!5mfW_J!<G"R"99\C!<<i0"9TJt
.lI2,"#^/\2u<^X,PhE@'_qk62us%?qZI!^!<F;>"99\C!<<i0"9U^d4<XM("$Jh4,PqTD,PhE@'_qk6
5QO.nqZI!66:4*:"99\C!<<i1"9];[!C7ju"99\C!<<i1"9_+W!C7ju"99\C!<>Rc"9h7%!<GJ/nH8h:
q>gR0r\O^I8.uF2!<GJ/nH8h:mf<GT+RoR7,Otm7!<GJ/nH8h:q>ggm8kVfN786PV!<GJ/nH8h:q>gRb
qZI'_:B:J^+RoR7,PhE@'`%q8:bVo9+SGs9"99\C!<<i1"9]?7!C7ju"99\C!<<i0"9Umi5p5\#!$h=@
!#553"$6NG+RoR7,PhEB'EeR9"9UUa!BKZQ!$h=@!#553!uNjF2=UeL,PhE@']fGt,PhE@'^l2!"99\C
!<<hq"99\C!<<hq"99\C!<<hq"99\E!<N9&']fGt,PhE@']fGt;YgCo7I('W;cN`D!EE1s!<H8(q^2AH
qulct!'KTK!*\ss!*fG-!@Ln;>l[^m"Fp~>

%%EndBinary
grestore
np
203.265 420.198 mo
206.28 420.198 li
206.28 413.161 li
203.265 413.161 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
203.312 316.986 mo
203.312 307.802 li
195.509 307.802 li
195.509 316.986 li
cp
/9 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[9.18423 0 0 7.80313 38.195 399.422 ]ct
snap_to_device
<<
/T 1
/W 48 
/H 41 
/M[48 0 0 -41 0 41 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!rr?'"8)d""U529#k\K,$4@7O%ep/-%hS1A!>6(=#lkD+&HNRWmh#R8'DDe7#mhC>&HN[br<*-:)>XpG
)B8YY!?<-Q#mD@P%Ncf:rXf;X,:"Q<-Mn)L-i+DU-n4Hg"=auq.kLB#!%n$Z!A4H>#m2gm&MWka!AQA+
&HO%2m0NnP2%_H!oEbLVq@N`f"RQKu3=uia48oQ\#luIiq@N]imKj"Z4qSABnd,:\q@N`E5jo!^5nO\q
#kA9&(dn-3!%7LIq?[9R6kL"_n-K(`q@N`G7e$cf7hH>(8am#e!#58A!'0TV"A2<!&PVU!!)<;%!Bs9M
#m:8@&Pl0i#m!k"q@N^*oEbX^;\9U@m0NeL<Vd:.<[m\J"9MX:=BYS/n-K(>q@Na3-M7ZJ>7hH6>jMat
4^Imr!+,@*"=Y&t&RXf0!+>X8!F\7m$2Or2@M'2^AEjI%AS1cN!,)'5">OR%&Kp9D!,;9A!G5p=#m=uT
&JAmH$2b)1!#PJD!'0l^"DgC:&T-Y:!+,L6!H('t#m;"U&ORDt#m"sJq@N^Hr!<KfE=ie'r!DWp!Aefn
&HPpSr<WTb/eJe?j9Yi50)?.[8,`etG'=N1GiK)2H$]B#!YH#hrWr^SHk?r\iX#Taq@NuIFU8A&&J8&c
iX#WsIejW\EX>?2&J9!K$2"T)J,0`]6QUai&T0bi#m#Tcq@Ni`Je8STh?a17q@Nj3KFqg-r!DBi!JQ:'
&HHJ"#m#4)q%3X95hlYHLfaEb!/]G:!?I'p&HRW?g'IaJq[ijeC[;Ar#m#u!r"/pGfEhP&r=K&f(t],q
**<+O!"f#6g^++CNfSB*lj81~>

%%EndBinary
grestore
np
203.312 316.986 mo
206.28 316.986 li
206.28 307.986 li
203.312 307.986 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
201.972 512.974 mo
201.972 508.722 li
196.802 508.722 li
196.802 512.974 li
cp
/10 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[4.25151 0 0 5.17017 -157.793 400.762 ]ct
snap_to_device
<<
/T 1
/W 22 
/H 28 
/M[22 0 0 -28 0 28 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qZ$m&!WrQ/"pYD?rVus+$i9o+$k3[Wr"')F&ebro()Ihe!!*rUrX]8Q*$$(B+<gXo#pLSo!$ij%-7:5=
!!4SX.fKtb.kCZP/eARI0_bVQ0b4g,.kCZUrX]&ap&G(K"V;4q/-%O+&-+T]!!Y>?&1]:33;sHh3V<@U
.M+X&!':)j!Y7CVpAb@\5<oMT62V8s6:4-h7J6]]7emT"%j=/-8-]1m!!"eJ&-O:N8kVkU!!+Z(o+1st
:/Cfg!C]iU&-5!mqu?aq;tCP$&lec/"=t6>)ccSC!%7RB#$+f-:,H*Wq[`m1>?hCar;c]p![q>\r"&s;
?t!O<!!4BT3rKTmA.]Aa<:p4lAnV)S"DDK\&2NkX!"Jo="<M:h&8Un<!,VWG"`7uc&/K0V!![?Q&1):1
&-EIT>&j9:#'+br&17Hmr=B$PFZ'$r#U=M(&.j%j!,DEC'kqo<H>n4YI9dd'&6`E@!"TVP+FZ!B&-@>o
>5f'7J:Vb?!"`pP;CqknGsd0^K.@`NKObGf!.Y~>

%%EndBinary
grestore
np
201.972 512.974 mo
204.94 512.974 li
204.94 508.761 li
201.972 508.761 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
109.052 99.4077 mo
109.052 86.2892 li
102.398 86.2892 li
102.398 99.4077 li
cp
/11 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[13.1185 0 0 6.65421 255.773 493.682 ]ct
snap_to_device
<<
/T 1
/W 68 
/H 36 
/M[68 0 0 -36 0 36 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!!)Zm!s/Q,"SMir"oJH&#5S?%#7(Y$!rr]$$Nge>!tFr3!"So/!"\i4!"e`(p]CL'oa:j1!s9#+$NL\7
!rrl,$NL\%!sAT)!>,tB$ORO]!<N?*"9AN<(B"UC(DHlRqu[91(`<f%$Q9s!*!Q6BliR8/*rHBG)u0R:
+!CLi!$V(="sP9;$Qp`Bj9#B0r!NN@./<rF.K'VT.P(5q""Z#30&cs60-pH'!&43N!AQ)&$NMsW!sCD:
$T0j$!rt:X$NVA0q?$aY3rKEe4$<HDr<!-b4psUC!s1^g61tB\6Mh,j6i$lb7/I>l7JR#f7LMCMn,ihb
8P0@`9_SVi9htTo!)NIo"&Mi&$iLG6;C;8C"9ML0<(uod"BAJ>=!7JM!E^H;!ruL%$NXF8qu['2$X?sh
rX/`f8,EAj?4.-JpB(S,@5MF955P]g@q>98!G+Im$NOQ4!sKl\$YO-&r<iU>qZ?p:$S#oc!s*0Mr!NKV
r<iX9AG-*+A8M/O!GtO0!sNQT$ZA^Xr<iX8EW#tAEY]%(p&bP-@;U)nF`oJ;$NXaJpB(I!"*aYN!Btc-
!sNrX5'd<Xr!NLPr<!.M$S=a7!ru^,$NXaJo`G5DJ,BZ]J-,n)JdZB:"$B3S$NPhY!sF:2$\gY0!rrr3
$NagK"8)`rL\qMaLku4k$O_1X!s"8X$O7FN!s:(^$]OKU!"o/;!Fo[4!s+Bdr!N[g"-3h>M>dSXOAYra
#)iX2OUI<UmfNRm&cE(<@q>36!@!a*$Nt=23X]$e!s!9<$O'9]Po:#Hm/m>#r<iX9AFfm'QM_*nQ\,YR
R/@$d=oA^3,ai!I$_$elpB(C-r<iX9AFfm(0bX<j!?ON(!s+m]r<ib!9+.=Wm/m>#r<iX9AFfm(9LS^b
!2')i!208u"^G:?56D#U!rrr3$NXaJncJlcq[3F.-2I]E!BU,d!F/.]!rrr3$NXaJncJnP=SrO-6qmFZ
!@BZ$$NZA:liR5"r<iX9AFTa%Rf!NnUA+fj7JmMnU[&!^&cE(<@q>*3!L],M$Nd,("8N$"#,V;,!N&-J
!rrr3$NXaJnH/e6O8]LeVtL2mE;g4GF!BoP!"o/;!Fo[2!sSi0710Ja!VQTqW;[/)3U-\H&cE(<@q>'2
""("II.RLBAZB>+!rrr3$NXaJqZFtC!"o/;!FoZY!rrr4$N^]GAAeQM&cE(<@q<[`quZp2r<iX9AAeQM
/H#qVX3h%F!s&P+r?D<Er<iWuG5NT2!s!uC$fD-V!s=LbYH\"gr+uV"O]&GnO+7~>

%%EndBinary
grestore
np
109.052 99.4077 mo
110.441 99.4077 li
110.441 86.2908 li
109.052 86.2908 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
291.924 97.8758 mo
291.924 83.5956 li
285.269 83.5956 li
285.269 97.8758 li
cp
/12 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[14.2802 0 0 6.65421 257.305 310.81 ]ct
snap_to_device
<<
/T 1
/W 74 
/H 36 
/M[74 0 0 -36 0 36 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!!)Zm!s/Q,"SMir"oJH'"pOl)!s])<$KV?i$hXo1%0H\Bp'^s4#5nW)&/"^H!>6(B"7-*i$hXo1%0H\B
p'^s4#5nW)&/"^H!>H4/!sAT)!>Q7F$jmad!<N?*"9AN?)>ssG)B/\\rW<T3!sT_c*Zke!+<D[M,N8e+
,UN?s!%.IC!%7^R!@TDk!sL/)$k+[=h?*a1r!WQY!&43N!?Eon$ii'W!sCD:$oK9c!s(;=r!WQbq#^XC
+8lTK3BHp;"$6o"4R*%>!rtL^$irOVq?$a_5lD)l0gYU;";!m.6U]Z2!=(@W$ii`m!rtgf$iifn!s9Jq
$qU@"h#dZh8c/tt8k]'a!=BbB$is$'q?$gI$nk?.!ru*n$ij*$!s2:-$is4'r<r[)qZ?sZ<"))nf`M7U
=8WI,;u?_#=:>U@>5\j0(Ae19:CIY9h#mQW!F/q.$iqY1rW<=1?OSe'7f<_r?t&s8!u;;SA(Le_AGZc8
Ac;c9Adf);!ru=!$ijr=!sE:F$u#q:"6K[d.5h#3$>NQC&4-e)CBFYdr<r^CD>jV>D@?qleH5ejr!Wd2
<Wd=p%!)=L!>mKg$j(JP!sE^g%!F,N!s*Ujr!WaS"*+f'HN"!I&:=?a#(1h$ILHWRp&bAGJ8kHV!eFs5
quZs+E;`6-JV%b4!s/i=%/pY=K7npeL55^0!)EJ$"u1*"L^ZN^p&b>P55P`h&RPD<!="GY$ir'dp&b;H
r!W]BMcU=GquZsRNVs7hNfQF6La2Tq!JuO-$iqY\r<!**O:;$q!Kgmc!s+QMq@!CePPbL`<L!Fj"I58]
$o7JX"+?N'%K-\9)3=[t".91Y=8iU/G\HaP!."DL!Lj;j!rum0$j2V#S8J'(q?$aB0E)@\)3=Ur!AeQk
$itTdo`G4qNVa+aSb`Eh/LC9&!,h</!L$Ua$iq6,q?$b8SGiotG\H^O!1Wlp!Al;)"8r<%T)8utOe;.G
!EN;$$iq6,q?$a$SGiotG\H^O!DoHf$ik8A!s&Bqr<r_##4Vcr<`f8/!?$sp!s&OprX8gPB`/&.!s'Z)
rX8fdUA"`iU\tT$Dt!i0<`f8/!?$sp!s&OprX8gPB_)<+V#Cc'+=-[`!.t1Y!FPos!s;S*$k*1G)3=Ur
!<eql$itTdo)eu[rX8d=p&bF#V$md0mfNSk=8iU/)3=Ur!<eql$itTdncJt5V[/(N!sA\(Ah!oP!s)G(
rX8fFO88qZ"J#H"!I/;%!s)G(rX8fFO88qZD5I4?!I/;K"5<nYWE9'-!?$sp!s(firX8gPBZpPZQWO.p
!?$sp!s#A%0E)@\G\G;'!NZq5$iq6JqZ?j'Y5Jb0YF3f@qZ?kSYl5%36_aJ\"&#L"GlA*R0sRg^bl[rt
rX8i]EsDUG"Dq``+L:qS!dlUqkl^#L!f++ErX9'UQ*?-0%%F>lq[<I6b6&0[[?\04\#QsK\pX[mqn)nV
J,~>

%%EndBinary
grestore
np
291.924 97.8758 mo
293.312 97.8758 li
293.312 83.7535 li
291.924 83.7535 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
95.9355 29.371 mo
95.9355 18.591 li
83.8718 18.591 li
83.8718 29.371 li
cp
/2 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[10.78 0 0 12.0637 325.81 506.799 ]ct
snap_to_device
<<
/T 1
/W 56 
/H 64 
/M[56 0 0 -64 0 64 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
o)Jdl!mL]J!sAc3#L<AP#RLhF!t#AC%+5+V%1`7B!=oak!!*ZEq$I-9'_h[c!!*fMr<`Q9(]=[A(`Cs+
!?)pV$3_Ci"!/O,rX&ZL!UBaU!!a\m,ROl)$RYfP#:CoK$4875/DU:0+tX-//hd##"Y_Y<$8O0h!!N?&
1GgrtpAb:R2`N#8!!"Ra!.k40!!Xf23]fGe555*Y5="'*"$o6h6i@>q6q'R884ia["%l3[:$hrR!!+cK
q[*<kq[*T`:B1Ak;$p2KirB-Z<%7eR#ut#-5s74]=BSi,$3j^>6ja8??/ttd?=3[=!%J!P@/0d()$FCF
$3;)Oj8]0hrX&ZPA+]g&A7bZG!?5>+!!*g-rX&X0o)Je_B)N&;)dVP*!,)6;!,1p'!=VHs$3;)Ojo>Ei
7K*VpBkm/<"`%o]$6*:G!:Kmg5>1t_!GQ<=!!Q(?$47_Xjo>Bur!EFAn,NT0$47_XklC\_!-%iC!-.K.
"?@n<)dVS+!-7uE!CTQM!!I@b$?[`Y!!%3>$3=jNrW)Qj""ak(AEEjm!@djP!]3LeoDetXE+gfb!!.=d
p^.1.(O9kDF8#[p!!%B;$3VN"I=?\%!!-V\n-T8K/qS`E!:^$hK^K0KKnaj1!!,fLm0WkKLuJC:!!%k5
m0WklB]&jlF,M=3$3>>PhZ*^=#pB'Op'LhZ54AOSNK/Auo)Jo!DMp,@nd5AXnc/iTDikA6&+9K%M3='6
P\g($!`E;(qZ$kR4)U;dQ8'ie$36FY!!G3ID4-+R$31>-!!$O+$32OR$33ia!!8UYD#4P>B)2K58:6qu
E@Zj:$N:A4:AOqkT:kWQ!K!NI$34Z6!!e-<U-YO[!0@'c!)ECk"';:pVXFKcVH*O$!N-@u!!&tr$33iu
!!Ha<$E4$o!!!r8$3@!'oDelir<`O"qZ$_=$47gA!!/([r<`Rq;tL%iW;R&':AY"nEXE/TnGrLf!&XW]
!*f$p!3#i'!)ECk"EFhV+\hA)!3Q2,!3Ynn!3#i'!)ECk!-8&G!*nsm!E2Je$3=#-quHKl!3#i'!)ECk
!-8&G!GR_d!!*g-rX&ZC?Ln-sW;R&':AY"kEr?=GYS?U-!3uM1!@g2%!!&tr$33iu!!%';$3@H"o)Jes
Pl;!jMKA=g!3#i'!)ECk!-7rD!YUPWp&G,TL].V]';P't!3#i'!)ECk!-8&G!@=!0$4K=r<jN7BK2!]#
0=DMm$3@VOn,NHer<`O"qZ$kA$485*2Rml+$3V;VWuMcN$3DMn-LUp7W;R&':AY"nD[Ir(rW!)4Q+N8s
q$I3M]VmjX!!&tr$33iu!!9jJ&c)J8T9r0a^g^c-\SdKQlMpp`r<`O"e,]CH!3#i'!)Ci?!3#i'!)Ci?
!3#i'!)EImdf9BHr<`O"cN!qir<`P=mJuJO!a\#NrOi3Ir<`PAqn:bb!B*X@$KV9_!!E_J_Si/I(]8Xa
(Did`0#`>~>

%%EndBinary
grestore
np
95.9355 29.371 mo
97.3238 29.371 li
97.3238 18.7434 li
95.9355 18.7434 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
280.147 30.1369 mo
280.147 18.3915 li
268.083 18.3915 li
268.083 30.1369 li
cp
/3 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[11.7454 0 0 12.0637 325.044 322.587 ]ct
snap_to_device
<<
/T 1
/W 61 
/H 64 
/M[61 0 0 -64 0 64 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
o)Jdl!lt?E!sAc3#LEJJ!!*?3rX&]7$k:G]!=fY;$3:\McN!qX!#,/8!>H9r!!*iOr<`QB)>smC)B7-*
!?<-Z$3D7j!!48d,5qoM,:(h?!@9)l$3DS'.K'5I.LH(]!@o/A!!OZ"$48@"q#CCI""sug0\-4+0esn.
pAb:P2)[DD!!#"J!.k3?!!YG/3]fGe.JNlD4[/]BhuEih5<qO5$3`a`6q'R(r;Zpi"\8aN!!,Y`q[*<r
q[*T\9E5&e$49O(p&O=W!Ad1C$4.5>;+;<H;H$O!rX&[+;#Ue&<_qTQ!B=0[$3F=4>58.">;0=Z$3=1'
nGr"X!!N9.!<ld%!!-D5r!EI*:Z)3R?t'$A!+PO"!ErJ$$3=1'li?\Y!+Z!8!=NH/!!-YCrX&[,:Z29S
B5%8O!GQ<=!!Ot_$49g0k5bAZ!Br%5$3=jKnGi`.C^LMM:Z29R?2Y*2$Z5A5"==H_<_q]T!<?'r$34u5
!!I3I$<Bs]!!#ak$3>*cnGi]4Esd"bi;`k#rX/W3!F^0B!!IK`$@$jT!!.Cmq?d9THnk6n!e#NIhuEe.
'`&.A$4;?9K7k"Qe,TJ&oEkbKKnbA1.bF_%0gkXAq[*F]M2I5F!!$*g$3C`\%GLj`.3nBjr!EIZ52-&<
N/d33!GFUM!!/*img9.($A"8l!!87E615-]/LB'M"?B&:PAKds!0l"6"`&EY<0_h)$3>iadJsD_(7$jG
q?d7MQi-p4!!-Yuq?d4ji;`mSH1(_6O.,qQ!1W``lMq"f0,L/I!!-Jur!EFqiW'(Q$47O9!!&\i$3?iE
oDn@\"&0+0U@&!^4sKq4!2KGl!]Qo0rM9QMNd(C$!AlP0V$IZE2uiqQ$4:\=!!.ABr<`Nhqu?dQVh+fF
!eI>Nr;ZnC@Y+HU#S1YM!)3e-Pr.n/!3?&*!3H(u!F(BW$3;f<r;ZjW7/I;o-`m@K:&YJ":%&&_)clqF
!C<md!!@MM;CqbR!O.L[!!BJf5=5>V"=pbX!)<G"!F`>(!!.C4rX&Y4p](;Dr<`S0Mu!DSNa2Pj"=pbX
!)<D!!M,SI!!'G+$3=tOp](;Ur<`S0Mu!DS&\%`H!@tGW!!#ak$3@YOo)Jg%>lG'2&2X(]!,_ZA!O.LY
!!+g`rX&cYZ2al!q[*BF]!:r/!Bc)8$3?TupAb21r<`S0Mu!DS0t7,h"tQtZ!)3e-!X]*CrX''Q]8&rZ
N+J#(4or;urX&[i.eWiBD>aeBY`&>X!AV(_$4AAi!!#_#$;8'97tpgI"9q4gJJ7th!kuE+o`+u/r<`S0
Mu!DS0t7,h#:m([!5Jq7MZ*SUMZX4#AjZ;#""1<;O7N>OD>aeBY`&>X!AV(_$3i#d!!'>B+8PsFJARDc
`1N[@&slu8nGiQ+r<`S0Mu!DS0t7,h!@tJH!9aC_D>aeBY`&>X!>0n^$3;Z_f`2"ur<`S0Mu!DS`bbV]
!@tJC!:9ad48fKeY`&>X!H3>a$3;Z_f`2&n"o\i0Yc@R#!B;k5$3:fJkQ(/R!G0@O$3:j@qZ$Z='E&7=
as>U>!6b?K!<p^G!!K,2^*Co$$3I-N''0,e!!4t&E;g1MRYd`bd0cl$)#FX?b1H\&(/Ti4GfXr,dg#sT
5PndfSq$~>

%%EndBinary
grestore
np
280.147 30.137 mo
281.535 30.137 li
281.535 18.504 li
280.147 18.504 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
302.838 218.513 mo
302.838 203.754 li
293.551 203.754 li
293.551 218.513 li
cp
/4 /CSD get_res idxcs
gsave
clp
[0 -1 -1 0 602.734 355.181 ]ct
[14.7589 0 0 9.28716 136.668 299.896 ]ct
snap_to_device
<<
/T 1
/W 77 
/H 49 
/M[77 0 0 -49 0 49 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
"98H(!sJ<$"9nr5!=8T0"UYV;$k3F8"U,AF%hK<cj9Yf"mM#X9r!<?+m1]U;#mo`#!#P&;!#YV?!#b/<
!#jo)!?3$X*<@3'q@irQ*r[/^+X.4!rWrfS*?6(?*[E'/'ETU/*r[/\+Xl1R!%IaY!%RIE!@o_u'EKO4
iX,>c!&"*^!&*gJ!AG>e'EKO8fEhO1q@io_n-K+L(]+mI-8GH*g^*s5q@io_n-K+L(]+mI-8F-Z!&"*^
!&+9WoEbOP(]+mI-8F-Z!&"*^!&*gJ!AG>e'EKO8jpCVc!&"*^!&*gJ!AG>e'EKO8fEhO1q@io_n-K+L
(]+mI-8F-Z!&"*^!&*gJ!AG>e'EKO8fEhO1q@io_n-K+L(]+mI-8F-Z!&"*^!&*gJ!AG>e'EKO8l3Znc
!&"*^!&*gJ!AG>e'EKO8fEhO1q@io_n-K+L(]>$M'GMlKfEhO1q@iobn-K+O/Gg+^-8F-Z!&"3arY,>h
n215)2u=9i-8F-Z!&!1D!@BPh$0qlt0)?7_3'$Oj!]rM-q\0&X1"Zd40)?7_00\qk!^7efq\0&X1"Zd4
0)?7^5k#'\5o9D4!@BPR#llUS'EBfU#lu^rq\0&X1"Zd40)?7^0CT8K0GjU#!@BPl$0MTp0)?7^0CT8K
0GjU#!@BPR#llUS'EBfW#m1J?0GjU#!@BPR#llUS'EBfU#lu^rq\0&X1#!$6#llUS'EBfU#lu^rq\0&X
1"Zd40)?7^0CT8K0GjU#!@BPr#m!@[!%\"(!CTBR#m!L`rA+L*7mHeU!&"*^!&*gJ!AG>e'EKO8p^$sl
8c20^/5&\8#m*gR/Gr*@:/CZl!&"*^!&+$Pq[!9W(]+mI-8G9%!DkrV'EL3kr<WL&;u770<)r`#!&"*^
!&*gJ!AG>e'EKO8p^%%'<s2Y('EL*hr<WTj)[0A-rY,E;>7(-4!&"*^!&*gJ!AG>e'EKO8oa(V'r=f8j
;>LS"-scfd!Er_'#llUS'EBfU#lu^rq\0&X1&;4S#ln<1'EL*hq?[0Y3;sTm>$Le/!&"*^!&*gJ!AG>e
'EKO8oa(UDr=f8j;>LS"?XWjI!Er_'#llFN'EBWZ$24`,.kLQ3!@BDk#ll7L'EL*hq?[10@/^iD>$D:>
)]\ht!?N?Z'EK<trZ)"_,5_`P,97aE*?HIPq\0)Y-Q`7-!?ilg#ll7L'EL*hq?[72?ka:Y'O"]I#oE"D
!#YV?!#b/<!#k_@!$qLW!B*gO#m"C@rY,K=>6tU>mM#Y0r!<@4mh>g;'EJ":!$qLW!B*gO#m"C@rY,WA
>6tUG#@n*OpB:_4"D9(eB`&/?BkhDc?5`J@"__@MC_gmb#ll7L'EL*hq?[10@/^i@>$LA#h$F',r=f8j
;>LS"DE.V0!Er^L#lnoB'EL*hq?[1AEW-XQ>$K)T!+,U<!B*gO#lu;lrY,B:>Lj,Q#lnT9'EN8Kq?[-O
r=f9SFiapj$?Z7]!Hr\a#m#9rr=f93*UsHh#m!59rY,B[%/gJ87!ppT8c9>)2F%hr#m*dCErHaSI=>T.
2HgfEBit6H!.`,s$lrK%8Mj_)K7ml($&/76!/?"~>

%%EndBinary
grestore
np
302.838 218.513 mo
304.227 218.513 li
304.227 203.912 li
302.838 203.912 li
cp
1 /13 /CSD get_res sepcs
0 sep
f
[] 0 dsh
153.861 574.107 mo
153.861 550.123 li
.92929 .879301 .889677 .799283 cmyk
@
150.653 550.937 mo
153.861 541.219 li
157.116 550.937 li
150.653 550.937 li
ef
161.855 574.107 mo
161.855 550.41 li
@
158.6 551.224 mo
161.855 541.506 li
165.063 551.224 li
158.6 551.224 li
ef
220.498 574.92 mo
220.498 551.224 li
@
217.243 552.038 mo
220.498 542.32 li
223.706 552.038 li
217.243 552.038 li
ef
210.541 574.92 mo
210.541 551.224 li
@
207.334 552.038 mo
210.541 542.32 li
213.796 552.038 li
207.334 552.038 li
ef
181.1 556.25 mo
180.142 556.25 179.376 557.064 179.376 558.069 cv
179.376 559.075 180.142 559.936 181.1 559.936 cv
182.009 559.936 182.775 559.075 182.775 558.069 cv
182.775 557.064 182.009 556.25 181.1 556.25 cv
ef
181.1 556.25 mo
180.142 556.25 179.376 557.064 179.376 558.069 cv
179.376 559.075 180.142 559.936 181.1 559.936 cv
182.009 559.936 182.775 559.075 182.775 558.069 cv
182.775 557.064 182.009 556.25 181.1 556.25 cv
cp
@
187.323 556.25 mo
186.366 556.25 185.6 557.064 185.6 558.069 cv
185.6 559.075 186.366 559.936 187.323 559.936 cv
188.281 559.936 188.999 559.075 188.999 558.069 cv
188.999 557.064 188.281 556.25 187.323 556.25 cv
ef
187.323 556.25 mo
186.366 556.25 185.6 557.064 185.6 558.069 cv
185.6 559.075 186.366 559.936 187.323 559.936 cv
188.281 559.936 188.999 559.075 188.999 558.069 cv
188.999 557.064 188.281 556.25 187.323 556.25 cv
cp
@
193.834 556.25 mo
192.876 556.25 192.158 557.064 192.158 558.069 cv
192.158 559.075 192.876 559.936 193.834 559.936 cv
194.791 559.936 195.557 559.075 195.557 558.069 cv
195.557 557.064 194.791 556.25 193.834 556.25 cv
ef
193.834 556.25 mo
192.876 556.25 192.158 557.064 192.158 558.069 cv
192.158 559.075 192.876 559.936 193.834 559.936 cv
194.791 559.936 195.557 559.075 195.557 558.069 cv
195.557 557.064 194.791 556.25 193.834 556.25 cv
cp
@
1 /13 /CSD get_res sepcs
1 sep
DRADRU+TimesNewRomanPSMT [12.0159 0 0 -12.0159 0 0 ]msf
143.472 584.878 mo
(\0008\000V\000H\000U\000\003\000'\000D\000W\000D\000\003\0006\000W\000U\000H\000D\000P)
[8.66594 4.66475 5.32553 3.99167 2.99445 8.66594 5.32553 3.33089 5.32553 2.99443 6.67131 3.33089 
3.99167 5.32553 5.32553 0 ]xsh
191.871 242.928 mo
190.914 242.928 190.148 243.79 190.148 244.795 cv
190.148 245.8 190.914 246.614 191.871 246.614 cv
192.781 246.614 193.547 245.8 193.547 244.795 cv
193.547 243.79 192.781 242.928 191.871 242.928 cv
.92929 .879301 .889677 .799283 cmyk
ef
191.871 242.928 mo
190.914 242.928 190.148 243.79 190.148 244.795 cv
190.148 245.8 190.914 246.614 191.871 246.614 cv
192.781 246.614 193.547 245.8 193.547 244.795 cv
193.547 243.79 192.781 242.928 191.871 242.928 cv
cp
@
198.094 242.928 mo
197.137 242.928 196.371 243.79 196.371 244.795 cv
196.371 245.8 197.137 246.614 198.094 246.614 cv
199.052 246.614 199.77 245.8 199.77 244.795 cv
199.77 243.79 199.052 242.928 198.094 242.928 cv
ef
198.094 242.928 mo
197.137 242.928 196.371 243.79 196.371 244.795 cv
196.371 245.8 197.137 246.614 198.094 246.614 cv
199.052 246.614 199.77 245.8 199.77 244.795 cv
199.77 243.79 199.052 242.928 198.094 242.928 cv
cp
@
204.605 242.928 mo
203.648 242.928 202.929 243.79 202.929 244.795 cv
202.929 245.8 203.648 246.614 204.605 246.614 cv
205.562 246.614 206.328 245.8 206.328 244.795 cv
206.328 243.79 205.562 242.928 204.605 242.928 cv
ef
204.605 242.928 mo
203.648 242.928 202.929 243.79 202.929 244.795 cv
202.929 245.8 203.648 246.614 204.605 246.614 cv
205.562 246.614 206.328 245.8 206.328 244.795 cv
206.328 243.79 205.562 242.928 204.605 242.928 cv
cp
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 ]]
] del_res
/DRADRU+TimesNewRomanPSMT-Identity-H uf
/DRADRU+TimesNewRomanPSMT /CIDFont ur
/DRADRW+TimesNewRomanPS-ItalicMT*1 uf
/DRADRW+TimesNewRomanPS-ItalicMT uf
/QPOBAA+TimesNewRomanPS-ItalicMT uf
/DRADRV+TimesNewRomanPS-BoldMT-Identity-H uf
/DRADRV+TimesNewRomanPS-BoldMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
